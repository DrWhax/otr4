package otr4

import (
	"math/big"
	"testing"

	. "gopkg.in/check.v1"
)

func Test(t *testing.T) { TestingT(t) }

type DualReceiverEncryptionSuite struct{}

var _ = Suite(&DualReceiverEncryptionSuite{})

var testByteArray = []byte{
	0xad, 0xd0, 0x35, 0x07, 0x1d, 0x09, 0x6c, 0xd3,
	0xdd, 0xf8, 0x96, 0x59, 0x39, 0x1c, 0x29, 0xa2,
	0x1e, 0x49, 0x34, 0xae, 0xc1, 0x79, 0x0e, 0x85,
	0x1c, 0x06, 0x73, 0xf2, 0xdd, 0x5d, 0x39, 0x71,
	0xf5, 0x70, 0x71, 0x4d, 0x5c, 0xca, 0x18, 0x02,
	0xaf, 0xa3, 0x85, 0x1b, 0x8a, 0x53, 0x39, 0xb7,
	0xa2, 0x33, 0x1b, 0x8a, 0x53, 0x39, 0xb7, 0xa2,
	0x33, 0x2a, 0xf4, 0xf7, 0xb6, 0x26, 0x37, 0x3e,
	0xb7, 0xd5, 0x9a, 0x1b, 0x3c, 0xf2, 0xfd, 0x63,
}

func (s *DualReceiverEncryptionSuite) Test_DualReceiverEncryption(c *C) {
	//pk1 := CramerShoup.PublicKey()
	//pk2 := CramerShoup.PublicKey()

	//m := "hi"

	//ct := DualRecieverEncryption.Encrypt(pk1, pk2, m)

	//expectedCiphertext := "bl"

	//c.Assert(ct, Equals, expectedCiphertext)
}

//TODO Finish test, update publickey and secretkey type to use type in Ed448
func (s *DualReceiverEncryptionSuite) Test_Auth(c *C) {
	pubKey := &publicKey{
		big.NewInt(0),
	}
	secKey := &secretKey{
		big.NewInt(1),
	}
	message := []byte{0, 1, 0, 0, 0}
	sigma := auth(pubKey, pubKey, pubKey, secKey, message)

	c.Assert(sigma, HasLen, 6)
}

func (s *DualReceiverEncryptionSuite) Test_HashToScalar(c *C) {
	scalar := hashToScalar(testByteArray)

	exp := []byte{
		0x2a, 0xf3, 0xcc, 0x69, 0xbb, 0xa1, 0x50,
		0x35, 0xe8, 0x64, 0x74, 0x82, 0x90, 0xdc,
		0xf9, 0x6a, 0xe5, 0xb7, 0x87, 0x46, 0x90,
		0xfc, 0x6d, 0x32, 0x17, 0x36, 0x9a, 0x18,
		0x20, 0xb8, 0x1c, 0x9a, 0x8f, 0xd3, 0x93,
		0x8d, 0x8d, 0xd8, 0x12, 0xe3, 0xab, 0x22,
		0xa7, 0xc1, 0x42, 0xea, 0xf0, 0x41, 0x8b,
		0xfe, 0xc3, 0xe9, 0xa8, 0x4c, 0x62, 0xc,
	}

	c.Assert(scalar, HasLen, 56)
	c.Assert(scalar, DeepEquals, exp)
}

func (s *DualReceiverEncryptionSuite) Test_Concat(c *C) {
	a := []byte{4}
	b := []byte{}
	d := []byte{
		0x2a, 0xf3, 0xcc, 0x69, 0xbb, 0xa1, 0x50,
		0x35, 0xe8, 0x64, 0x74, 0x82, 0x90, 0xdc,
	}

	concatenatedValue := concat(a, b, d, testByteArray)

	exp := []byte{
		4,
		0x2a, 0xf3, 0xcc, 0x69, 0xbb, 0xa1, 0x50,
		0x35, 0xe8, 0x64, 0x74, 0x82, 0x90, 0xdc,
		0xad, 0xd0, 0x35, 0x07, 0x1d, 0x09, 0x6c, 0xd3,
		0xdd, 0xf8, 0x96, 0x59, 0x39, 0x1c, 0x29, 0xa2,
		0x1e, 0x49, 0x34, 0xae, 0xc1, 0x79, 0x0e, 0x85,
		0x1c, 0x06, 0x73, 0xf2, 0xdd, 0x5d, 0x39, 0x71,
		0xf5, 0x70, 0x71, 0x4d, 0x5c, 0xca, 0x18, 0x02,
		0xaf, 0xa3, 0x85, 0x1b, 0x8a, 0x53, 0x39, 0xb7,
		0xa2, 0x33, 0x1b, 0x8a, 0x53, 0x39, 0xb7, 0xa2,
		0x33, 0x2a, 0xf4, 0xf7, 0xb6, 0x26, 0x37, 0x3e,
		0xb7, 0xd5, 0x9a, 0x1b, 0x3c, 0xf2, 0xfd, 0x63,
	}

	c.Assert(concatenatedValue, DeepEquals, exp)
}
