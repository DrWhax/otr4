package otr4

import (
	. "gopkg.in/check.v1"
)

func (s *OTR4Suite) Test_NewUserProfile(c *C) {
	exp := &userProfile{
		versions: "4",
		sig:      &signature{},
	}

	profile, err := newProfile("4")

	c.Assert(profile, DeepEquals, exp)
	c.Assert(err, IsNil)

	profile, err = newProfile("")

	c.Assert(profile, IsNil)
	c.Assert(err, ErrorMatches, ".* no valid version agreement could be found")

	profile, err = newProfile("1")

	c.Assert(profile, IsNil)
	c.Assert(err, ErrorMatches, ".* no valid version agreement could be found")

	profile, err = newProfile("31")

	c.Assert(profile, IsNil)
	c.Assert(err, ErrorMatches, ".* no valid version agreement could be found")

	profile, err = newProfile("24")

	c.Assert(profile, IsNil)
	c.Assert(err, ErrorMatches, ".* no valid version agreement could be found")
}

func (s *OTR4Suite) Test_SerializeUserSignature(c *C) {
	signature := &signature{
		0xee, 0xec, 0x0c, 0xa7, 0x39, 0x65, 0x3c, 0x35,
		0xe2, 0x28, 0xd3, 0xc8, 0xc1, 0x07, 0x96, 0xeb,
		0x06, 0xe8, 0x14, 0x05, 0x62, 0x52, 0xab, 0x6c,
		0x63, 0xf1, 0x4f, 0x55, 0xb3, 0xea, 0x9b, 0x1d,
		0xbf, 0xe7, 0xb7, 0xec, 0x8b, 0x52, 0x43, 0x46,
		0x35, 0xd5, 0xd5, 0xbb, 0xbb, 0xea, 0xfe, 0x7e,
		0xcd, 0xc8, 0xd6, 0xf2, 0x7c, 0x71, 0x87, 0x61,
		0xfa, 0x77, 0xed, 0x08, 0x51, 0x91, 0xc4, 0x85,
		0x74, 0x28, 0xdd, 0xa0, 0xed, 0xbc, 0x88, 0x71,
		0xbd, 0xc3, 0x34, 0x9a, 0xce, 0xee, 0x1a, 0xab,
		0x4c, 0xa2, 0x37, 0xea, 0xb4, 0xea, 0xd2, 0x8d,
		0x25, 0xf1, 0x10, 0x86, 0xc0, 0x60, 0xeb, 0xb3,
		0xb0, 0x9a, 0xaa, 0x8a, 0x4b, 0x00, 0x9e, 0xf1,
		0x93, 0x25, 0xfe, 0x78, 0x0f, 0xdd, 0xa1, 0x3a,
	}

	exp := [112]byte{
		0xee, 0xec, 0x0c, 0xa7, 0x39, 0x65, 0x3c, 0x35,
		0xe2, 0x28, 0xd3, 0xc8, 0xc1, 0x07, 0x96, 0xeb,
		0x06, 0xe8, 0x14, 0x05, 0x62, 0x52, 0xab, 0x6c,
		0x63, 0xf1, 0x4f, 0x55, 0xb3, 0xea, 0x9b, 0x1d,
		0xbf, 0xe7, 0xb7, 0xec, 0x8b, 0x52, 0x43, 0x46,
		0x35, 0xd5, 0xd5, 0xbb, 0xbb, 0xea, 0xfe, 0x7e,
		0xcd, 0xc8, 0xd6, 0xf2, 0x7c, 0x71, 0x87, 0x61,
		0xfa, 0x77, 0xed, 0x08, 0x51, 0x91, 0xc4, 0x85,
		0x74, 0x28, 0xdd, 0xa0, 0xed, 0xbc, 0x88, 0x71,
		0xbd, 0xc3, 0x34, 0x9a, 0xce, 0xee, 0x1a, 0xab,
		0x4c, 0xa2, 0x37, 0xea, 0xb4, 0xea, 0xd2, 0x8d,
		0x25, 0xf1, 0x10, 0x86, 0xc0, 0x60, 0xeb, 0xb3,
		0xb0, 0x9a, 0xaa, 0x8a, 0x4b, 0x00, 0x9e, 0xf1,
		0x93, 0x25, 0xfe, 0x78, 0x0f, 0xdd, 0xa1, 0x3a,
	}

	c.Assert(serializeSignature(signature), DeepEquals, exp)
}

func (s *OTR4Suite) Test_SerializeUserProfileBody(c *C) {
	profile, _ := newProfile("34")

	expiration := int64(12)
	profile.expiration = expiration

	profile.pub = testPubA

	ser := serializeBody(profile)

	exp := []byte{
		// versions
		0x00, 0x00, 0x00, 0x02, 0x03, 0x04,
		// csPubKey
		0x00, 0x10, 0xd6, 0xbb, 0xa4, 0x32, 0xfa, 0xd4,
		0x88, 0xde, 0x31, 0x3b, 0x61, 0xcb, 0x30, 0xdf,
		0xc1, 0x76, 0xba, 0xc5, 0x9a, 0x12, 0xc7, 0x8c,
		0x36, 0xa5, 0x69, 0x13, 0xa8, 0x5b, 0xb1, 0x80,
		0xe3, 0x5c, 0x29, 0x15, 0x5b, 0xee, 0x22, 0x26,
		0xdb, 0x35, 0x0f, 0x1d, 0xcc, 0x77, 0x5f, 0x50,
		0x84, 0x61, 0x19, 0x37, 0x85, 0x4e, 0x9b, 0xa2,
		0xc2, 0x22, 0xf2, 0x9c, 0x02, 0x67, 0x76, 0xa2,
		0xbe, 0xaf, 0x31, 0x5d, 0x00, 0x1a, 0x01, 0x30,
		0xc0, 0xb8, 0xba, 0x04, 0xf3, 0xa7, 0x9f, 0xae,
		0xf2, 0x78, 0x00, 0x8b, 0x5d, 0x58, 0xa4, 0x13,
		0xd1, 0xee, 0xb4, 0x8b, 0xb5, 0x83, 0x06, 0x1e,
		0x6d, 0xae, 0x28, 0x04, 0x4e, 0x38, 0xb7, 0x5d,
		0x32, 0x0e, 0xff, 0x20, 0xae, 0x2a, 0xbf, 0x4e,
		0xdb, 0x44, 0xd8, 0x8c, 0xc8, 0xae, 0x88, 0xeb,
		0xcb, 0xbd, 0x73, 0xcc, 0x8c, 0x4c, 0x87, 0xc8,
		0xd8, 0x0d, 0x27, 0x7e, 0xb3, 0xd8, 0xe1, 0x1d,
		0x55, 0x35, 0xdf, 0x42, 0x38, 0xf2, 0x4f, 0x65,
		0xf5, 0x31, 0xc1, 0x35, 0x3b, 0x6a, 0x3a, 0x0a,
		0x7b, 0x3b, 0x6d, 0x4c, 0x6e, 0xd7, 0xfc, 0x53,
		0xa0, 0x3b, 0xba, 0xfe, 0xda, 0x5b, 0xd1, 0x63,
		0x8d, 0x3a,
		// expiration
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0c,
	}

	c.Assert(ser, DeepEquals, exp)

	transSig := &dsaSignature{
		0xee, 0xec, 0x0c, 0xa7, 0x39, 0x65, 0x3c, 0x35,
		0xe2, 0x28, 0xd3, 0xc8, 0xc1, 0x07, 0x96, 0xeb,
		0x06, 0xe8, 0x14, 0x05, 0x62, 0x52, 0xab, 0x6c,
		0x63, 0xf1, 0x4f, 0x55, 0xb3, 0xea, 0x9b, 0x1d,
		0xbf, 0xe7, 0xb7, 0xec, 0x8b, 0x52, 0x43, 0x46,
	}
	profile.transitionalSig = transSig

	ser = serializeBody(profile)

	exp = []byte{
		// versions
		0x00, 0x00, 0x00, 0x02, 0x03, 0x04,
		// csPubKey
		0x00, 0x10, 0xd6, 0xbb, 0xa4, 0x32, 0xfa, 0xd4,
		0x88, 0xde, 0x31, 0x3b, 0x61, 0xcb, 0x30, 0xdf,
		0xc1, 0x76, 0xba, 0xc5, 0x9a, 0x12, 0xc7, 0x8c,
		0x36, 0xa5, 0x69, 0x13, 0xa8, 0x5b, 0xb1, 0x80,
		0xe3, 0x5c, 0x29, 0x15, 0x5b, 0xee, 0x22, 0x26,
		0xdb, 0x35, 0x0f, 0x1d, 0xcc, 0x77, 0x5f, 0x50,
		0x84, 0x61, 0x19, 0x37, 0x85, 0x4e, 0x9b, 0xa2,
		0xc2, 0x22, 0xf2, 0x9c, 0x02, 0x67, 0x76, 0xa2,
		0xbe, 0xaf, 0x31, 0x5d, 0x00, 0x1a, 0x01, 0x30,
		0xc0, 0xb8, 0xba, 0x04, 0xf3, 0xa7, 0x9f, 0xae,
		0xf2, 0x78, 0x00, 0x8b, 0x5d, 0x58, 0xa4, 0x13,
		0xd1, 0xee, 0xb4, 0x8b, 0xb5, 0x83, 0x06, 0x1e,
		0x6d, 0xae, 0x28, 0x04, 0x4e, 0x38, 0xb7, 0x5d,
		0x32, 0x0e, 0xff, 0x20, 0xae, 0x2a, 0xbf, 0x4e,
		0xdb, 0x44, 0xd8, 0x8c, 0xc8, 0xae, 0x88, 0xeb,
		0xcb, 0xbd, 0x73, 0xcc, 0x8c, 0x4c, 0x87, 0xc8,
		0xd8, 0x0d, 0x27, 0x7e, 0xb3, 0xd8, 0xe1, 0x1d,
		0x55, 0x35, 0xdf, 0x42, 0x38, 0xf2, 0x4f, 0x65,
		0xf5, 0x31, 0xc1, 0x35, 0x3b, 0x6a, 0x3a, 0x0a,
		0x7b, 0x3b, 0x6d, 0x4c, 0x6e, 0xd7, 0xfc, 0x53,
		0xa0, 0x3b, 0xba, 0xfe, 0xda, 0x5b, 0xd1, 0x63,
		0x8d, 0x3a,
		// expiration
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0c,
		// transitional sig
		0xee, 0xec, 0x0c, 0xa7, 0x39, 0x65, 0x3c, 0x35,
		0xe2, 0x28, 0xd3, 0xc8, 0xc1, 0x07, 0x96, 0xeb,
		0x06, 0xe8, 0x14, 0x05, 0x62, 0x52, 0xab, 0x6c,
		0x63, 0xf1, 0x4f, 0x55, 0xb3, 0xea, 0x9b, 0x1d,
		0xbf, 0xe7, 0xb7, 0xec, 0x8b, 0x52, 0x43, 0x46,
	}

	c.Assert(ser, DeepEquals, exp)
}

func (s *OTR4Suite) Test_SignUserProfile(c *C) {
	profile, _ := newProfile("43")

	expiration := int64(12)
	profile.expiration = expiration

	keyPair, err := deriveCramerShoupKeys(fixedRand(csRandData))

	err = profile.sign(fixedRand(csRandData), keyPair)

	exp := &signature{
		0x6f, 0xee, 0xc9, 0xeb, 0x3c, 0x4a, 0x55, 0x9d,
		0xea, 0x51, 0x02, 0x08, 0x98, 0x76, 0x0a, 0x3b,
		0x20, 0x98, 0x92, 0xf7, 0xd0, 0x4d, 0x55, 0xfc,
		0x86, 0x87, 0x85, 0xbc, 0x5f, 0x9c, 0xcc, 0x6d,
		0x1c, 0x73, 0xef, 0x71, 0x9c, 0xd4, 0xbd, 0x38,
		0xaf, 0xa4, 0xa5, 0xdb, 0xfb, 0x5f, 0x77, 0xfc,
		0x3c, 0x8c, 0x89, 0x75, 0xa8, 0x23, 0x65, 0x06,
		0xa2, 0xfb, 0x40, 0xd9, 0x9a, 0x82, 0x53, 0x8c,
		0x46, 0x81, 0x23, 0xc6, 0xdc, 0xd0, 0xf0, 0x40,
		0xd3, 0xb5, 0x29, 0xc3, 0xc1, 0xe1, 0xc3, 0x8d,
		0xd6, 0xb6, 0x56, 0x1e, 0x00, 0xc2, 0x07, 0xb1,
		0x90, 0x63, 0xb6, 0xa2, 0x10, 0xa7, 0xb2, 0x0f,
		0x0d, 0x39, 0x18, 0xb9, 0x57, 0x39, 0x69, 0xda,
		0x9e, 0x1e, 0xbf, 0xbd, 0x29, 0x4f, 0xa4, 0x00,
	}

	c.Assert(profile.sig, DeepEquals, exp)
	c.Assert(err, IsNil)

	err = profile.sign(fixedRand([]byte{0x00}), keyPair)

	c.Assert(err, ErrorMatches, "*.cannot source enough entropy")
}

func (s *OTR4Suite) Test_VerifyUserProfile(c *C) {
	profile, _ := newProfile("43")

	expiration := int64(12)
	profile.expiration = expiration

	keyPair, err := deriveCramerShoupKeys(fixedRand(csRandData))

	err = profile.sign(fixedRand(csRandData), keyPair)

	c.Assert(err, IsNil)

	valid, err := profile.verify(keyPair.pub)

	c.Assert(valid, Equals, true)
	c.Assert(err, IsNil)
}

func (s *OTR4Suite) Test_SerializeUserProfile(c *C) {
	profile, _ := newProfile("34")

	expiration := int64(12)
	profile.expiration = expiration

	profile.pub = testPubA

	signature := &signature{
		0xee, 0xec, 0x0c, 0xa7, 0x39, 0x65, 0x3c, 0x35,
		0xe2, 0x28, 0xd3, 0xc8, 0xc1, 0x07, 0x96, 0xeb,
		0x06, 0xe8, 0x14, 0x05, 0x62, 0x52, 0xab, 0x6c,
		0x63, 0xf1, 0x4f, 0x55, 0xb3, 0xea, 0x9b, 0x1d,
		0xbf, 0xe7, 0xb7, 0xec, 0x8b, 0x52, 0x43, 0x46,
		0x35, 0xd5, 0xd5, 0xbb, 0xbb, 0xea, 0xfe, 0x7e,
		0xcd, 0xc8, 0xd6, 0xf2, 0x7c, 0x71, 0x87, 0x61,
		0xfa, 0x77, 0xed, 0x08, 0x51, 0x91, 0xc4, 0x85,
		0x74, 0x28, 0xdd, 0xa0, 0xed, 0xbc, 0x88, 0x71,
		0xbd, 0xc3, 0x34, 0x9a, 0xce, 0xee, 0x1a, 0xab,
		0x4c, 0xa2, 0x37, 0xea, 0xb4, 0xea, 0xd2, 0x8d,
		0x25, 0xf1, 0x10, 0x86, 0xc0, 0x60, 0xeb, 0xb3,
		0xb0, 0x9a, 0xaa, 0x8a, 0x4b, 0x00, 0x9e, 0xf1,
		0x93, 0x25, 0xfe, 0x78, 0x0f, 0xdd, 0xa1, 0x3a,
	}
	profile.sig = signature

	transSig := &dsaSignature{
		0xee, 0xec, 0x0c, 0xa7, 0x39, 0x65, 0x3c, 0x35,
		0xe2, 0x28, 0xd3, 0xc8, 0xc1, 0x07, 0x96, 0xeb,
		0x06, 0xe8, 0x14, 0x05, 0x62, 0x52, 0xab, 0x6c,
		0x63, 0xf1, 0x4f, 0x55, 0xb3, 0xea, 0x9b, 0x1d,
		0xbf, 0xe7, 0xb7, 0xec, 0x8b, 0x52, 0x43, 0x46,
	}
	profile.transitionalSig = transSig

	exp := []byte{
		// versions
		0x00, 0x00, 0x00, 0x02, 0x03, 0x04,
		// csPubKey
		0x00, 0x10, 0xd6, 0xbb, 0xa4, 0x32, 0xfa, 0xd4,
		0x88, 0xde, 0x31, 0x3b, 0x61, 0xcb, 0x30, 0xdf,
		0xc1, 0x76, 0xba, 0xc5, 0x9a, 0x12, 0xc7, 0x8c,
		0x36, 0xa5, 0x69, 0x13, 0xa8, 0x5b, 0xb1, 0x80,
		0xe3, 0x5c, 0x29, 0x15, 0x5b, 0xee, 0x22, 0x26,
		0xdb, 0x35, 0x0f, 0x1d, 0xcc, 0x77, 0x5f, 0x50,
		0x84, 0x61, 0x19, 0x37, 0x85, 0x4e, 0x9b, 0xa2,
		0xc2, 0x22, 0xf2, 0x9c, 0x02, 0x67, 0x76, 0xa2,
		0xbe, 0xaf, 0x31, 0x5d, 0x00, 0x1a, 0x01, 0x30,
		0xc0, 0xb8, 0xba, 0x04, 0xf3, 0xa7, 0x9f, 0xae,
		0xf2, 0x78, 0x00, 0x8b, 0x5d, 0x58, 0xa4, 0x13,
		0xd1, 0xee, 0xb4, 0x8b, 0xb5, 0x83, 0x06, 0x1e,
		0x6d, 0xae, 0x28, 0x04, 0x4e, 0x38, 0xb7, 0x5d,
		0x32, 0x0e, 0xff, 0x20, 0xae, 0x2a, 0xbf, 0x4e,
		0xdb, 0x44, 0xd8, 0x8c, 0xc8, 0xae, 0x88, 0xeb,
		0xcb, 0xbd, 0x73, 0xcc, 0x8c, 0x4c, 0x87, 0xc8,
		0xd8, 0x0d, 0x27, 0x7e, 0xb3, 0xd8, 0xe1, 0x1d,
		0x55, 0x35, 0xdf, 0x42, 0x38, 0xf2, 0x4f, 0x65,
		0xf5, 0x31, 0xc1, 0x35, 0x3b, 0x6a, 0x3a, 0x0a,
		0x7b, 0x3b, 0x6d, 0x4c, 0x6e, 0xd7, 0xfc, 0x53,
		0xa0, 0x3b, 0xba, 0xfe, 0xda, 0x5b, 0xd1, 0x63,
		0x8d, 0x3a,
		// expiration
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0c,
		// sig
		0xee, 0xec, 0x0c, 0xa7, 0x39, 0x65, 0x3c, 0x35,
		0xe2, 0x28, 0xd3, 0xc8, 0xc1, 0x07, 0x96, 0xeb,
		0x06, 0xe8, 0x14, 0x05, 0x62, 0x52, 0xab, 0x6c,
		0x63, 0xf1, 0x4f, 0x55, 0xb3, 0xea, 0x9b, 0x1d,
		0xbf, 0xe7, 0xb7, 0xec, 0x8b, 0x52, 0x43, 0x46,
		0x35, 0xd5, 0xd5, 0xbb, 0xbb, 0xea, 0xfe, 0x7e,
		0xcd, 0xc8, 0xd6, 0xf2, 0x7c, 0x71, 0x87, 0x61,
		0xfa, 0x77, 0xed, 0x08, 0x51, 0x91, 0xc4, 0x85,
		0x74, 0x28, 0xdd, 0xa0, 0xed, 0xbc, 0x88, 0x71,
		0xbd, 0xc3, 0x34, 0x9a, 0xce, 0xee, 0x1a, 0xab,
		0x4c, 0xa2, 0x37, 0xea, 0xb4, 0xea, 0xd2, 0x8d,
		0x25, 0xf1, 0x10, 0x86, 0xc0, 0x60, 0xeb, 0xb3,
		0xb0, 0x9a, 0xaa, 0x8a, 0x4b, 0x00, 0x9e, 0xf1,
		0x93, 0x25, 0xfe, 0x78, 0x0f, 0xdd, 0xa1, 0x3a,
		// transSignature
		0xee, 0xec, 0x0c, 0xa7, 0x39, 0x65, 0x3c, 0x35,
		0xe2, 0x28, 0xd3, 0xc8, 0xc1, 0x07, 0x96, 0xeb,
		0x06, 0xe8, 0x14, 0x05, 0x62, 0x52, 0xab, 0x6c,
		0x63, 0xf1, 0x4f, 0x55, 0xb3, 0xea, 0x9b, 0x1d,
		0xbf, 0xe7, 0xb7, 0xec, 0x8b, 0x52, 0x43, 0x46,
	}

	ser := profile.serialize()

	c.Assert(ser, DeepEquals, exp)
}
