package otr4

import (
	"encoding/binary"
	"encoding/hex"
	"math/big"

	"github.com/twstrike/ed448"

	. "gopkg.in/check.v1"
)

func (s *OTR4Suite) Test_ShakeToScalar(c *C) {
	scalar := shakeToScalar(testByteSlice)

	exp := ed448.NewScalar([]byte{
		0x1e, 0xda, 0x47, 0xce, 0x5a, 0x2a, 0x10, 0xdb,
		0x67, 0x8a, 0x38, 0x2c, 0xe2, 0x70, 0x2f, 0xea,
		0x92, 0x8d, 0x6a, 0x4c, 0x11, 0x27, 0xfd, 0x7c,
		0xb0, 0x6f, 0x1a, 0x0b, 0x71, 0x82, 0x6b, 0x90,
		0xe3, 0x6b, 0xdd, 0x7d, 0x17, 0xab, 0xfd, 0x9e,
		0xad, 0xf2, 0x04, 0x0d, 0x97, 0x19, 0x46, 0x09,
		0x3d, 0xb3, 0xa3, 0x67, 0xca, 0x01, 0x8d, 0x95,
	})

	c.Assert(scalar, DeepEquals, exp)
}

func (s *OTR4Suite) Test_HashToScalar(c *C) {
	scalar := hashToScalar(byte(01), testPoint)

	exp := ed448.NewScalar([]byte{
		0xd4, 0x9b, 0xec, 0x13, 0xe4, 0xba, 0xdb, 0x6a,
		0x0c, 0x32, 0x8d, 0x4b, 0x57, 0x3d, 0x22, 0x23,
		0x23, 0x74, 0x90, 0xec, 0x91, 0x05, 0xe9, 0xd2,
		0xd2, 0x9e, 0xa8, 0x86, 0xc9, 0x6b, 0x8f, 0x60,
		0x67, 0x9b, 0xa6, 0xbd, 0x2d, 0x38, 0xc1, 0x23,
		0x7a, 0xdd, 0x01, 0x94, 0xfa, 0xb5, 0x8c, 0x9e,
		0x80, 0xc4, 0x11, 0x50, 0x64, 0xac, 0x1e, 0x1f,
	})

	c.Assert(scalar, DeepEquals, exp)
}

func (s *OTR4Suite) Test_AppendBytes(c *C) {
	empty := []byte{}
	bs := []byte{
		0x04, 0x2a, 0xf3, 0xcc, 0x69, 0xbb, 0xa1, 0x50,
	}

	exp := []byte{
		0x04, 0x2a, 0xf3, 0xcc, 0x69, 0xbb, 0xa1, 0x50,
		0x70, 0x27, 0xc3, 0x28, 0x5d, 0xb9, 0x02, 0x11,
		0xbd, 0xc2, 0x6b, 0xef, 0xb3, 0xb2, 0xe7, 0x6d,
		0x6f, 0x2e, 0x20, 0xf6, 0x97, 0xb1, 0xfe, 0xa1,
		0xc6, 0x75, 0x11, 0xc8, 0x24, 0x6d, 0x73, 0x44,
		0x8f, 0x28, 0xeb, 0x1d, 0x15, 0x48, 0x36, 0xac,
		0xc5, 0x5f, 0xbe, 0xc7, 0xa9, 0x04, 0x13, 0x03,
		0x3d, 0x6a, 0xda, 0xc6, 0x7c, 0x36, 0x71, 0x06,
		0xd6, 0xbb, 0xa4, 0x32, 0xfa, 0xd4, 0x88, 0xde,
		0x31, 0x3b, 0x61, 0xcb, 0x30, 0xdf, 0xc1, 0x76,
		0xba, 0xc5, 0x9a, 0x12, 0xc7, 0x8c, 0x36, 0xa5,
		0x69, 0x13, 0xa8, 0x5b, 0xb1, 0x80, 0xe3, 0x5c,
		0x29, 0x15, 0x5b, 0xee, 0x22, 0x26, 0xdb, 0x35,
		0x0f, 0x1d, 0xcc, 0x77, 0x5f, 0x50, 0x84, 0x61,
		0x19, 0x37, 0x85, 0x4e, 0x9b, 0xa2, 0xc2, 0x22,
	}

	c.Assert(func() { appendBytes() }, Panics, "programmer error: missing append arguments")
	c.Assert(func() { appendBytes(bs) }, Panics, "programmer error: missing append arguments")
	c.Assert(func() { appendBytes("not a valid input", bs) }, Panics, "programmer error: invalid input")
	c.Assert(appendBytes(empty, bs, testPrivA.r, testPubA.h), DeepEquals, exp)
}

func (s *OTR4Suite) Test_AppendAndHash(c *C) {
	hash := appendAndHash(testPrivA.r, testPubA.h)

	exp := ed448.NewScalar([]byte{
		0x23, 0x98, 0xba, 0x78, 0x2a, 0x3e, 0x16, 0xb9,
		0x2c, 0xe7, 0x7e, 0x14, 0xac, 0x72, 0xd3, 0xab,
		0xaa, 0x87, 0x47, 0x23, 0xc9, 0xa5, 0x35, 0x75,
		0x44, 0xe2, 0xfb, 0xc3, 0xdd, 0x6f, 0xf0, 0xe3,
		0x60, 0x80, 0x78, 0x1e, 0x1c, 0x5b, 0xa5, 0xf8,
		0x3c, 0x7c, 0x6a, 0x62, 0x1a, 0xf2, 0x3e, 0x3f,
		0x37, 0x3c, 0x1d, 0x6c, 0x9f, 0x36, 0x13, 0x1f,
	})

	c.Assert(hash, DeepEquals, exp)
}

func (s *OTR4Suite) Test_AppendWord32(c *C) {
	bs := []byte{0xcc, 0x12}
	rslt := appendWord32(bs, 0xFF3824F7)

	c.Assert(rslt, DeepEquals, []byte{0xcc, 0x12, 0xFF, 0x38, 0x24, 0xF7})

	bs = []byte{}
	rslt = appendWord32(bs, uint32(256))

	b := make([]byte, 4)
	binary.BigEndian.PutUint32(b, uint32(256))

	c.Assert(rslt, DeepEquals, b)
}

func (s *OTR4Suite) Test_AppendWord64(c *C) {
	bs := []byte{0xcc, 0x12}
	rslt := appendWord64(bs, 0x01FE48A2FF3824F7)

	c.Assert(rslt, DeepEquals, []byte{0xcc, 0x12, 0x01, 0xFE, 0x48, 0xA2, 0xFF, 0x38, 0x24, 0xF7})

	bs = []byte{}
	rslt = appendWord64(bs, int64(8))

	c.Assert(rslt, DeepEquals, []byte{0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x8})
}

func (s *OTR4Suite) Test_AppendData(c *C) {
	bs := []byte{0x01, 0xAC}
	b := []byte{0x57, 0xFF, 0x21, 0xE4, 0x67}
	rslt := appendData(bs, b)

	c.Assert(rslt, DeepEquals, []byte{0x01, 0xAC, 0x00, 0x00, 0x00, 0x05, 0x57, 0xFF, 0x21, 0xE4, 0x67})
}

func (s *OTR4Suite) Test_AppendMPI(c *C) {
	bs := []byte{0x13, 0x54}
	mpi := new(big.Int).SetBytes([]byte{0x55, 0x12, 0x04, 0x8A, 0x00})
	rslt := appendMPI(bs, mpi)

	exp := []byte{
		0x13, 0x54, 0x00, 0x00, 0x00, 0x05, 0x55, 0x12,
		0x04, 0x8A, 0x00,
	}

	c.Assert(rslt, DeepEquals, exp)
}

func (s *OTR4Suite) Test_AppendPoint(c *C) {
	bs := []byte{}
	p := ed448.NewPoint(
		[16]uint32{
			0x0d9a309b, 0x000289cb, 0x02d19f65, 0x0b622ac4,
			0x05e6807f, 0x0a08b7f8, 0x0a2a124a, 0x00be3938,
			0x08475ec5, 0x00682935, 0x0ab32a89, 0x08377f34,
			0x075f359d, 0x0f12f2dc, 0x08d30bbc, 0x04c9b187,
		},
		[16]uint32{
			0x0627d6a6, 0x0d4bd92c, 0x0a91b860, 0x0209d8f9,
			0x0acef183, 0x038a181b, 0x01a80ca4, 0x036550a0,
			0x0810b32f, 0x0697d168, 0x01832b57, 0x0a92e97a,
			0x0c59385b, 0x085ebf7e, 0x035e4c9b, 0x01d4a5ce,
		},
		[16]uint32{
			0x02c059ed, 0x0a48a55e, 0x0c8728bd, 0x09bf85c1,
			0x0d10487f, 0x0dad01c8, 0x0ec8b362, 0x067d381b,
			0x0bd55d03, 0x0fa6172f, 0x0da14dd1, 0x00bd1e8d,
			0x0d7d1137, 0x073a3e0c, 0x0418d0cb, 0x0eaeb008,
		},
		[16]uint32{
			0x0ce390f7, 0x00deca5e, 0x02f49eb1, 0x0f1bdd2b,
			0x0440bb6a, 0x04a99c96, 0x086d3a76, 0x035d2358,
			0x0f89d14b, 0x0ccb0445, 0x0dfbf181, 0x05c26d7b,
			0x09185fba, 0x0dc1a6e0, 0x04f24b49, 0x0b419134,
		},
	)

	prev, _ := hex.DecodeString("e4b2a1a14395b5eb3a5c3f3d265782efc28b9a" +
		"94cc1d46fff8725079cee988d0955a3da9a2ef30abc30ef1bd947f48e0" +
		"93aad8405db1d268")

	c.Assert(appendPoint(bs, p), DeepEquals, prev)

	exp, _ := hex.DecodeString("e4b2a1a14395b5eb3a5c3f3d265782efc28b9a" +
		"94cc1d46fff8725079cee988d0955a3da9a2ef30abc30ef1bd947f48e0" +
		"93aad8405db1d268e4b2a1a14395b5eb3a5c3f3d265782efc28b9a94cc" +
		"1d46fff8725079cee988d0955a3da9a2ef30abc30ef1bd947f48e093aad" +
		"8405db1d268")

	c.Assert(appendPoint(prev, p), DeepEquals, exp)
}

//func (s *OTR4Suite) Test_SerializeSignature(c *C) {
//	signature := &signature{
//		0xee, 0xec, 0x0c, 0xa7, 0x39, 0x65, 0x3c, 0x35,
//		0xe2, 0x28, 0xd3, 0xc8, 0xc1, 0x07, 0x96, 0xeb,
//		0x06, 0xe8, 0x14, 0x05, 0x62, 0x52, 0xab, 0x6c,
//		0x63, 0xf1, 0x4f, 0x55, 0xb3, 0xea, 0x9b, 0x1d,
//		0xbf, 0xe7, 0xb7, 0xec, 0x8b, 0x52, 0x43, 0x46,
//		0x35, 0xd5, 0xd5, 0xbb, 0xbb, 0xea, 0xfe, 0x7e,
//		0xcd, 0xc8, 0xd6, 0xf2, 0x7c, 0x71, 0x87, 0x61,
//		0xfa, 0x77, 0xed, 0x08, 0x51, 0x91, 0xc4, 0x85,
//		0x74, 0x28, 0xdd, 0xa0, 0xed, 0xbc, 0x88, 0x71,
//		0xbd, 0xc3, 0x34, 0x9a, 0xce, 0xee, 0x1a, 0xab,
//		0x4c, 0xa2, 0x37, 0xea, 0xb4, 0xea, 0xd2, 0x8d,
//		0x25, 0xf1, 0x10, 0x86, 0xc0, 0x60, 0xeb, 0xb3,
//		0xb0, 0x9a, 0xaa, 0x8a, 0x4b, 0x00, 0x9e, 0xf1,
//		0x93, 0x25, 0xfe, 0x78, 0x0f, 0xdd, 0xa1, 0x3a,
//	}
//
//	var bytes []byte
//
//	ser := appendSignature(bytes, signature)
//
//	exp := []byte{
//		0xee, 0xec, 0x0c, 0xa7, 0x39, 0x65, 0x3c, 0x35,
//		0xe2, 0x28, 0xd3, 0xc8, 0xc1, 0x07, 0x96, 0xeb,
//		0x06, 0xe8, 0x14, 0x05, 0x62, 0x52, 0xab, 0x6c,
//		0x63, 0xf1, 0x4f, 0x55, 0xb3, 0xea, 0x9b, 0x1d,
//		0xbf, 0xe7, 0xb7, 0xec, 0x8b, 0x52, 0x43, 0x46,
//		0x35, 0xd5, 0xd5, 0xbb, 0xbb, 0xea, 0xfe, 0x7e,
//		0xcd, 0xc8, 0xd6, 0xf2, 0x7c, 0x71, 0x87, 0x61,
//		0xfa, 0x77, 0xed, 0x08, 0x51, 0x91, 0xc4, 0x85,
//		0x74, 0x28, 0xdd, 0xa0, 0xed, 0xbc, 0x88, 0x71,
//		0xbd, 0xc3, 0x34, 0x9a, 0xce, 0xee, 0x1a, 0xab,
//		0x4c, 0xa2, 0x37, 0xea, 0xb4, 0xea, 0xd2, 0x8d,
//		0x25, 0xf1, 0x10, 0x86, 0xc0, 0x60, 0xeb, 0xb3,
//		0xb0, 0x9a, 0xaa, 0x8a, 0x4b, 0x00, 0x9e, 0xf1,
//		0x93, 0x25, 0xfe, 0x78, 0x0f, 0xdd, 0xa1, 0x3a,
//	}
//
//	c.Assert(ser, DeepEquals, exp)
//
//	dsaSignature := &dsaSignature{
//		0xee, 0xec, 0x0c, 0xa7, 0x39, 0x65, 0x3c, 0x35,
//		0xe2, 0x28, 0xd3, 0xc8, 0xc1, 0x07, 0x96, 0xeb,
//		0x06, 0xe8, 0x14, 0x05, 0x62, 0x52, 0xab, 0x6c,
//		0x63, 0xf1, 0x4f, 0x55, 0xb3, 0xea, 0x9b, 0x1d,
//		0xbf, 0xe7, 0xb7, 0xec, 0x8b, 0x52, 0x43, 0x46,
//	}
//
//	ser = appendSignature(bytes, dsaSignature)
//
//	exp = []byte{
//		0xee, 0xec, 0x0c, 0xa7, 0x39, 0x65, 0x3c, 0x35,
//		0xe2, 0x28, 0xd3, 0xc8, 0xc1, 0x07, 0x96, 0xeb,
//		0x06, 0xe8, 0x14, 0x05, 0x62, 0x52, 0xab, 0x6c,
//		0x63, 0xf1, 0x4f, 0x55, 0xb3, 0xea, 0x9b, 0x1d,
//		0xbf, 0xe7, 0xb7, 0xec, 0x8b, 0x52, 0x43, 0x46,
//	}
//
//	c.Assert(ser, DeepEquals, exp)
//
//	cs := &cramerShoupPublicKey{}
//	ser = appendSignature(bytes, cs)
//
//	c.Assert(ser, IsNil)
//}
//
func (s *OTR4Suite) Test_ExtractWord32(c *C) {
	bs := []byte{0x12, 0x14, 0x15}
	i, rslt, ok := extractWord32(bs)

	c.Assert(i, IsNil)
	c.Assert(rslt, DeepEquals, uint32(0x0))
	c.Assert(ok, Equals, false)

	bs = []byte{0x12, 0x14, 0x15, 0xff, 0x03}
	i, rslt, ok = extractWord32(bs)

	c.Assert(i, DeepEquals, []byte{0x03})
	c.Assert(rslt, DeepEquals, uint32(0x121415ff))
	c.Assert(ok, Equals, true)
}

func (s *OTR4Suite) Test_ExtractWord64(c *C) {
	bs := []byte{0x12, 0x14, 0x15}
	_, rslt, ok := extractWord64(bs)

	c.Assert(rslt, DeepEquals, uint64(0x0))
	c.Assert(ok, Equals, false)

	bs = []byte{0x12, 0x14, 0x15, 0xff, 0x03,
		0x12, 0x14, 0x15, 0xff, 0x03,
	}
	_, rslt, ok = extractWord64(bs)

	c.Assert(rslt, DeepEquals, uint64(0x121415ff03121415))
	c.Assert(ok, Equals, true)
}

func (s *OTR4Suite) Test_ExtractData(c *C) {
	bs := []byte{0x00, 0x00, 0x00, 0x05, 0x55, 0x12, 0x04, 0x8A, 0x00}
	index, rslt, ok := extractData(bs)

	c.Assert(rslt, DeepEquals, []byte{0x55, 0x12, 0x04, 0x8A, 0x00})
	c.Assert(index, DeepEquals, []byte{})
	c.Assert(ok, Equals, true)
}

func (s *OTR4Suite) Test_ExtractPoint(c *C) {
	bs, _ := hex.DecodeString("e4b2a1a14395b5eb3a5c3f3d265782efc28b9a94c" +
		"c1d46fff8725079cee988d0955a3da9a2ef30abc30ef1bd947f48e093aa" +
		"d8405db1d268e4b2a1a14395b5eb3a5c3f3d265782efc28b9a94cc1d46f" +
		"ff8725079cee988d0955a3da9a2ef30abc30ef1bd947f48e093aad8405d" +
		"b1d268")
	cursor := 0

	exp := ed448.NewPoint(
		[16]uint32{
			0x034365c8, 0x06b2a874, 0x0eb875d7, 0x0ae4c7a7,
			0x0785df04, 0x09929351, 0x01fe8c3b, 0x0f2a0e5f,
			0x0111d39c, 0x07ab52ba, 0x01df4552, 0x01d87566,
			0x0f297be2, 0x027c090f, 0x0a81b155, 0x0d1a562b,
		},
		[16]uint32{
			0x00da9708, 0x0e7d583e, 0x0dbcc099, 0x0d2dad89,
			0x05a49ce4, 0x01cb4ddc, 0x0928d395, 0x0098d91d,
			0x0bff16ce, 0x06f02f9a, 0x0ce27cc1, 0x0dab5783,
			0x0b553d94, 0x03251a0c, 0x064d70fb, 0x07fe3a2f,
		},
		[16]uint32{
			0x0d5237cc, 0x0319d105, 0x02ab2df5, 0x022e9736,
			0x0d79742f, 0x00688712, 0x012d3a65, 0x0ef4925e,
			0x0bd0d260, 0x0832b532, 0x05faef27, 0x01ffe567,
			0x0161ce73, 0x07bda0f5, 0x035d04f1, 0x0930f532,
		},
		[16]uint32{
			0x01f6cc27, 0x09be7b8a, 0x0226da79, 0x0f6202f1,
			0x0e7264dc, 0x0d25aeb1, 0x06c81f07, 0x03c32cdc,
			0x0923c854, 0x0cfc9865, 0x055b2fed, 0x05bdcc90,
			0x01a99835, 0x0ea08056, 0x0abbf763, 0x03826c2f,
		},
	)

	p, cursor, err := extractPoint(bs, cursor)

	c.Assert(p, DeepEquals, exp)
	c.Assert(cursor, Equals, 56)
	c.Assert(err, IsNil)

	bs = []byte{}
	cursor = 0

	p, cursor, err = extractPoint(bs, cursor)

	c.Assert(p, DeepEquals, nil)
	c.Assert(cursor, Equals, 0)
	c.Assert(err, ErrorMatches, "*. invalid length")
}

func (s *OTR4Suite) Test_FromHexChar(c *C) {
	b, valid := fromHexChar(51)
	exp := uint8(0x3)

	c.Assert(b, DeepEquals, exp)
	c.Assert(valid, Equals, true)

	b, valid = fromHexChar('a')
	exp = uint8(0xa)

	c.Assert(b, DeepEquals, exp)
	c.Assert(valid, Equals, true)

	b, valid = fromHexChar('A')
	exp = uint8(0xA)

	c.Assert(b, DeepEquals, exp)
	c.Assert(valid, Equals, true)

	b, valid = fromHexChar('.')
	exp = uint8(0x0)

	c.Assert(b, DeepEquals, exp)
	c.Assert(valid, Equals, false)
}

func (s *OTR4Suite) Test_ParseToByte(c *C) {
	str := "34"

	exp := []byte{0x03, 0x04}

	c.Assert(parseToByte(str), DeepEquals, exp)

	str = ""

	c.Assert(parseToByte(str), IsNil)
}

func (s *OTR4Suite) Test_BytesToString(c *C) {
	bs := []byte{0x03, 0x04}
	exp := "34"

	c.Assert(bytesToString(bs), DeepEquals, exp)

	bs = []byte{0xd3, 0xff}
	exp = "211255"

	c.Assert(bytesToString(bs), DeepEquals, exp)
}
