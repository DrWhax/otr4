package otr4

import (
	"encoding/hex"

	"github.com/twstrike/ed448"

	. "gopkg.in/check.v1"
)

func (s *OTR4Suite) Test_HashToScalar(c *C) {
	scalar := hashToScalar(testByteSlice)

	exp := ed448.NewScalar([]byte{
		0x1e, 0xda, 0x47, 0xce, 0x5a, 0x2a, 0x10, 0xdb,
		0x67, 0x8a, 0x38, 0x2c, 0xe2, 0x70, 0x2f, 0xea,
		0x92, 0x8d, 0x6a, 0x4c, 0x11, 0x27, 0xfd, 0x7c,
		0xb0, 0x6f, 0x1a, 0x0b, 0x71, 0x82, 0x6b, 0x90,
		0xe3, 0x6b, 0xdd, 0x7d, 0x17, 0xab, 0xfd, 0x9e,
		0xad, 0xf2, 0x04, 0x0d, 0x97, 0x19, 0x46, 0x09,
		0x3d, 0xb3, 0xa3, 0x67, 0xca, 0x01, 0x8d, 0x95,
	})

	c.Assert(scalar, DeepEquals, exp)
}

func (s *OTR4Suite) Test_AppendBytes(c *C) {
	empty := []byte{}
	bytes := []byte{
		0x04, 0x2a, 0xf3, 0xcc, 0x69, 0xbb, 0xa1, 0x50,
	}

	exp := []byte{
		0x04, 0x2a, 0xf3, 0xcc, 0x69, 0xbb, 0xa1, 0x50,
		0xa3, 0xf8, 0x0e, 0xb2, 0xa6, 0x99, 0x23, 0x9a,
		0x81, 0x9b, 0x5e, 0xc3, 0x30, 0xce, 0xd7, 0x49,
		0x7b, 0xdb, 0x3b, 0xe7, 0x0d, 0xd0, 0x91, 0xec,
		0x6e, 0xc6, 0xd7, 0xdc, 0xd1, 0xd3, 0xe2, 0x68,
		0xd5, 0xf1, 0xcc, 0xd6, 0x2f, 0x87, 0xb0, 0x27,
		0xd7, 0x59, 0x89, 0x65, 0x02, 0x16, 0xec, 0x5a,
		0x0f, 0x84, 0x1a, 0xbe, 0xda, 0xa1, 0x88, 0x02,
		0xd8, 0x8c, 0xc8, 0xae, 0x88, 0xeb, 0xcb, 0xbd,
		0x73, 0xcc, 0x8c, 0x4c, 0x87, 0xc8, 0xd8, 0x0d,
		0x27, 0x7e, 0xb3, 0xd8, 0xe1, 0x1d, 0x55, 0x35,
		0xdf, 0x42, 0x38, 0xf2, 0x4f, 0x65, 0xf5, 0x31,
		0xc1, 0x35, 0x3b, 0x6a, 0x3a, 0x0a, 0x7b, 0x3b,
		0x6d, 0x4c, 0x6e, 0xd7, 0xfc, 0x53, 0xa0, 0x3b,
		0xba, 0xfe, 0xda, 0x5b, 0xd1, 0x63, 0x8d, 0x3a,
	}

	c.Assert(func() { appendBytes() }, Panics, "programmer error: missing append arguments")
	c.Assert(func() { appendBytes(bytes) }, Panics, "programmer error: missing append arguments")
	c.Assert(func() { appendBytes("not a valid input", bytes) }, Panics, "programmer error: invalid input")
	c.Assert(appendBytes(empty, bytes, testPrivA.z, testPubA.h), DeepEquals, exp)
}

func (s *OTR4Suite) Test_AppendAndHash(c *C) {
	hash := appendAndHash(testPrivA.z, testPubA.h)

	expScalar := ed448.NewScalar([]byte{
		0x7f, 0xdb, 0x06, 0x43, 0xaa, 0x7e, 0x65, 0xa0,
		0x4f, 0x82, 0x2e, 0x18, 0xdd, 0x45, 0xf1, 0x80,
		0x88, 0x49, 0x58, 0xfb, 0x50, 0x39, 0x3e, 0x56,
		0x04, 0x09, 0x40, 0x23, 0xd4, 0x47, 0xc9, 0x7c,
		0x22, 0x4e, 0x41, 0x78, 0x65, 0xbb, 0x9e, 0x11,
		0x60, 0xe0, 0xbe, 0xb4, 0x42, 0x32, 0xa0, 0x54,
		0x9c, 0xe6, 0xa, 0x96, 0x38, 0x83, 0x4a, 0x19})

	c.Assert(hash, DeepEquals, expScalar)
}

func (s *OTR4Suite) Test_AppendPoint(c *C) {
	p := ed448.NewPoint(
		[16]uint32{
			0x0d9a309b, 0x000289cb, 0x02d19f65, 0x0b622ac4,
			0x05e6807f, 0x0a08b7f8, 0x0a2a124a, 0x00be3938,
			0x08475ec5, 0x00682935, 0x0ab32a89, 0x08377f34,
			0x075f359d, 0x0f12f2dc, 0x08d30bbc, 0x04c9b187,
		},

		[16]uint32{
			0x0627d6a6, 0x0d4bd92c, 0x0a91b860, 0x0209d8f9,
			0x0acef183, 0x038a181b, 0x01a80ca4, 0x036550a0,
			0x0810b32f, 0x0697d168, 0x01832b57, 0x0a92e97a,
			0x0c59385b, 0x085ebf7e, 0x035e4c9b, 0x01d4a5ce,
		},

		[16]uint32{
			0x02c059ed, 0x0a48a55e, 0x0c8728bd, 0x09bf85c1,
			0x0d10487f, 0x0dad01c8, 0x0ec8b362, 0x067d381b,
			0x0bd55d03, 0x0fa6172f, 0x0da14dd1, 0x00bd1e8d,
			0x0d7d1137, 0x073a3e0c, 0x0418d0cb, 0x0eaeb008,
		},
		[16]uint32{
			0x0ce390f7, 0x00deca5e, 0x02f49eb1, 0x0f1bdd2b,
			0x0440bb6a, 0x04a99c96, 0x086d3a76, 0x035d2358,
			0x0f89d14b, 0x0ccb0445, 0x0dfbf181, 0x05c26d7b,
			0x09185fba, 0x0dc1a6e0, 0x04f24b49, 0x0b419134,
		},
	)

	b, _ := hex.DecodeString("e4b2a1a14395b5eb3a5c3f3d265782efc28b9a94cc1d46fff8725079cee988d0955a3da9a2ef30abc30ef1bd947f48e093aad8405db1d268")
	bb, _ := hex.DecodeString("e4b2a1a14395b5eb3a5c3f3d265782efc28b9a94cc1d46fff8725079cee988d0955a3da9a2ef30abc30ef1bd947f48e093aad8405db1d268e4b2a1a14395b5eb3a5c3f3d265782efc28b9a94cc1d46fff8725079cee988d0955a3da9a2ef30abc30ef1bd947f48e093aad8405db1d268")

	var l []byte

	c.Assert(appendPoint(l, p), DeepEquals, b)
	c.Assert(appendPoint(b, p), DeepEquals, bb)
}

func (s *OTR4Suite) Test_ExtractPoint(c *C) {
	bytes, _ := hex.DecodeString("e4b2a1a14395b5eb3a5c3f3d265782efc28b9a94cc1d46fff8725079cee988d0955a3da9a2ef30abc30ef1bd947f48e093aad8405db1d268e4b2a1a14395b5eb3a5c3f3d265782efc28b9a94cc1d46fff8725079cee988d0955a3da9a2ef30abc30ef1bd947f48e093aad8405db1d268")
	cursor := 0

	exp := ed448.NewPoint(
		[16]uint32{
			0x034365c8, 0x06b2a874, 0x0eb875d7, 0x0ae4c7a7,
			0x0785df04, 0x09929351, 0x01fe8c3b, 0x0f2a0e5f,
			0x0111d39c, 0x07ab52ba, 0x01df4552, 0x01d87566,
			0x0f297be2, 0x027c090f, 0x0a81b155, 0x0d1a562b,
		},

		[16]uint32{
			0x00da9708, 0x0e7d583e, 0x0dbcc099, 0x0d2dad89,
			0x05a49ce4, 0x01cb4ddc, 0x0928d395, 0x0098d91d,
			0x0bff16ce, 0x06f02f9a, 0x0ce27cc1, 0x0dab5783,
			0x0b553d94, 0x03251a0c, 0x064d70fb, 0x07fe3a2f,
		},

		[16]uint32{
			0x0d5237cc, 0x0319d105, 0x02ab2df5, 0x022e9736,
			0x0d79742f, 0x00688712, 0x012d3a65, 0x0ef4925e,
			0x0bd0d260, 0x0832b532, 0x05faef27, 0x01ffe567,
			0x0161ce73, 0x07bda0f5, 0x035d04f1, 0x0930f532,
		},
		[16]uint32{
			0x01f6cc27, 0x09be7b8a, 0x0226da79, 0x0f6202f1,
			0x0e7264dc, 0x0d25aeb1, 0x06c81f07, 0x03c32cdc,
			0x0923c854, 0x0cfc9865, 0x055b2fed, 0x05bdcc90,
			0x01a99835, 0x0ea08056, 0x0abbf763, 0x03826c2f,
		},
	)

	p, cursor, err := extractPoint(bytes, cursor)

	c.Assert(p, DeepEquals, exp)
	c.Assert(cursor, Equals, 56)
	c.Assert(err, IsNil)

	bytes = []byte{}
	cursor = 0

	p, cursor, err = extractPoint(bytes, cursor)

	c.Assert(p, DeepEquals, nil)
	c.Assert(cursor, Equals, 0)
	c.Assert(err, ErrorMatches, "*. invalid length")
}
