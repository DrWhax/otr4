package otr4

import (
	"github.com/twstrike/ed448"
	. "gopkg.in/check.v1"
)

func (s *OTR4Suite) Test_CramerShoupKeyDerivation(c *C) {

	csRandData := []byte{
		0x40, 0x80, 0x66, 0x2d, 0xd8, 0xe7, 0xf0, 0x9c,
		0xdf, 0xb0, 0x4e, 0x1c, 0x6e, 0x12, 0x62, 0xa3,
		0x7c, 0x31, 0x9a, 0xe1, 0xe7, 0x86, 0x87, 0xcc,
		0x82, 0x05, 0x78, 0xe6, 0x44, 0x2f, 0x4f, 0x77,
		0x0e, 0xd1, 0xb4, 0x48, 0xa6, 0x05, 0x90, 0x5e,
		0xe7, 0xba, 0xfc, 0x25, 0x99, 0x99, 0xb8, 0xc3,
		0x90, 0x3e, 0xf4, 0xa3, 0x75, 0xee, 0x85, 0x32,
		// x2
		0x16, 0xb1, 0x06, 0x5b, 0x81, 0xea, 0xac, 0xb3,
		0x69, 0x47, 0x6d, 0xa2, 0xaa, 0x86, 0x0b, 0xe5,
		0xcd, 0xac, 0x43, 0xd7, 0xb7, 0xe3, 0xb0, 0x85,
		0xd8, 0x66, 0xf9, 0xb6, 0x45, 0x2e, 0x81, 0x43,
		0xc2, 0x6f, 0x61, 0xc4, 0xdd, 0x65, 0x35, 0xa4,
		0xa4, 0xf9, 0x55, 0xf0, 0xf9, 0xd2, 0xf4, 0xb7,
		// y1
		0x52, 0x18, 0x41, 0x48, 0x60, 0x2d, 0x67, 0x8a,
		0xd3, 0xf3, 0xd2, 0xa4, 0xfd, 0x6f, 0x64, 0xf3,
		0x72, 0x82, 0xb0, 0x6a, 0x4d, 0xea, 0x9c, 0xef,
		0x99, 0x05, 0xe1, 0x8d, 0xaf, 0x2d, 0xdb, 0x52,
		0x57, 0x00, 0xac, 0x45, 0x24, 0x24, 0xb4, 0x79,
		0x02, 0x5f, 0x99, 0x70, 0x95, 0x2a, 0x90, 0x08,
		// y2
		0x51, 0x5b, 0x69, 0x03, 0xd5, 0x77, 0xb0, 0x77,
		0x35, 0x1f, 0x1b, 0x2d, 0xb1, 0x26, 0xf1, 0x69,
		0x3b, 0xcc, 0x4b, 0x0a, 0x95, 0x83, 0xd7, 0xec,
		0xfa, 0x8c, 0xf7, 0x80, 0xbe, 0x9b, 0x6d, 0xb4,
		0xc3, 0x24, 0x3c, 0x94, 0x9b, 0x63, 0xbc, 0x89,
		0xbc, 0x09, 0x39, 0xb8, 0xbf, 0xa2, 0x9b, 0xf4,
		0x3a, 0xa2, 0x9b, 0xbe, 0x6e, 0x78, 0x7b, 0x11,
		// z
		0x66, 0x60, 0x01, 0xb9, 0x83, 0x10, 0xd5, 0x7d,
		0xe4, 0x86, 0x58, 0x0a, 0x42, 0xd2, 0x2a, 0x74,
		0xe9, 0x5d, 0x77, 0xc4, 0x08, 0x46, 0x31, 0xb4,
		0x75, 0x1b, 0xf2, 0x67, 0x23, 0x19, 0x5e, 0xb6,
		0xfc, 0xe8, 0xd1, 0x38, 0x81, 0xa3, 0x98, 0x41,
		0xdf, 0xdf, 0x5d, 0x8d, 0x41, 0xb4, 0x66, 0x0f,
		0x39, 0xe1, 0x6f, 0x8c, 0x89, 0xed, 0xf6, 0x11,
	}

	expPub := &cramerShoupPublicKey{
		// c
		ed448.NewPoint(
			[16]uint32{
				0x05411f46, 0x08df069e, 0x08dc8166, 0x028c5989,
				0x0616e768, 0x01c7db68, 0x005df77c, 0x0b4a8e05,
				0x0bdf0ef2, 0x03881e13, 0x0e27a18b, 0x00b0c74b,
				0x0cfe8206, 0x0f3bf7fc, 0x0cb112d7, 0x0f078a8d,
			},
			[16]uint32{
				0x045f3a34, 0x05f1ba2e, 0x0c449ba7, 0x0584d7a7,
				0x0abf07ea, 0x0eacf6d1, 0x090d01b7, 0x0a0ff147,
				0x02ee2ebe, 0x0e307d0b, 0x0d306ff7, 0x076bfa22,
				0x04bb97aa, 0x0520f6c6, 0x033323d7, 0x040eb7d7,
			},
			[16]uint32{
				0x02148104, 0x01aae2b8, 0x05174b1c, 0x0a1f6b46,
				0x0ea449d4, 0x00e3fc7c, 0x0377a1dd, 0x0aed74c3,
				0x0827d494, 0x0fbade54, 0x07983c18, 0x0c236214,
				0x025abe2e, 0x06cf6694, 0x0e9663c0, 0x046ad356,
			},
			[16]uint32{
				0x093d8cd1, 0x00db0b69, 0x0c476e04, 0x0c1ec718,
				0x037f7404, 0x0c182f99, 0x0ca4f545, 0x08752cef,
				0x07b60af3, 0x09f140b6, 0x09e1d7b4, 0x042b7077,
				0x05ba2266, 0x0652bb21, 0x0aa480af, 0x01290548,
			},
		),
		// d
		ed448.NewPoint(
			[16]uint32{
				0x0f067b6a, 0x03a54b11, 0x0275da45, 0x06491809,
				0x077ec265, 0x0553c919, 0x0d640783, 0x0085ea8d,
				0x038c32fa, 0x0aef7dc7, 0x05dc5d0c, 0x020ba0e5,
				0x0b40f6b8, 0x0059a86f, 0x0de6dcf0, 0x0b76f2f0,
			},
			[16]uint32{
				0x08f6c6dd, 0x024b04c5, 0x0173fecf, 0x05173d48,
				0x0e07f13f, 0x0e853a03, 0x015fc93b, 0x024dbecd,
				0x0e3d8e9b, 0x096902f6, 0x0fb8c01a, 0x05465a1e,
				0x06d0a857, 0x0e2057b3, 0x059feff8, 0x0fc6f6d7,
			},
			[16]uint32{
				0x04a1aa0c, 0x0649bbf7, 0x07e0bb70, 0x0af9dc8d,
				0x0f87baec, 0x0d2a86f8, 0x0fed652b, 0x0d1fdbd2,
				0x0315d376, 0x0966e797, 0x09e9386f, 0x02baf362,
				0x0a9fe55a, 0x01c9422d, 0x0351c0b4, 0x0034f228,
			},
			[16]uint32{
				0x0fc7f708, 0x0d1f4e32, 0x08b894e1, 0x04b93d33,
				0x09277dcc, 0x0f156ebc, 0x0ad7683b, 0x01a45541,
				0x02703bca, 0x0832e3ed, 0x0b519fe3, 0x0770c700,
				0x0e39f33b, 0x047e28a4, 0x0f8cb494, 0x0ba6f866,
			},
		),
		// h
		ed448.NewPoint(
			[16]uint32{
				0x0aee8280, 0x0d01e31a, 0x0f6d26bb, 0x0eaded19,
				0x074e605e, 0x053c5713, 0x015c8c4b, 0x0c4a53e0,
				0x08a16484, 0x0c49d874, 0x035bd9dc, 0x0664af95,
				0x0577dc37, 0x02ebe9bb, 0x0146fe62, 0x0060cc60,
			},
			[16]uint32{
				0x0b35b4ff, 0x08fca353, 0x0de66d20, 0x0e044572,
				0x035ee48c, 0x0db91c49, 0x05add704, 0x0096499a,
				0x0bbce25e, 0x0fb89df7, 0x02e9216c, 0x0ec460b3,
				0x04ac0b62, 0x0523a992, 0x0f2ec4ea, 0x0ef1a5dc,
			},
			[16]uint32{
				0x03606f99, 0x0f8ec372, 0x0b6594c1, 0x02cd5735,
				0x0e913d70, 0x03f6a2fc, 0x0022d124, 0x03bce95f,
				0x0179c23f, 0x0da8678a, 0x01282104, 0x0f38aa8e,
				0x0f1e25c3, 0x0e8740ae, 0x01c4fecb, 0x0423ff46,
			},
			[16]uint32{
				0x0b952969, 0x053989ff, 0x04d222a4, 0x007cbb5e,
				0x025ebe13, 0x06fd5229, 0x03c16b10, 0x0049cd37,
				0x0c01d377, 0x0e9ae558, 0x03a6a7fa, 0x087d6705,
				0x0b8ea3f5, 0x09c47f7f, 0x069ef81a, 0x061453d0,
			},
		),
	}

	expPriv := &cramerShoupPrivateKey{
		// x1
		ed448.NewDecafScalar([]byte{
			0xc6, 0xd0, 0x98, 0x2e, 0xe4, 0xe5, 0x81, 0xe4,
			0x61, 0x3c, 0x46, 0x99, 0x0a, 0x37, 0x79, 0xc3,
			0xfa, 0xe5, 0xd5, 0x29, 0x27, 0x31, 0xa3, 0x55,
			0x9f, 0x34, 0x91, 0xd1, 0x0c, 0x7f, 0x88, 0x56,
			0x8c, 0x62, 0xe1, 0x86, 0xb7, 0xef, 0xd6, 0xcb,
			0x1b, 0x14, 0x88, 0x3b, 0xc0, 0xfb, 0xac, 0x46,
			0x0c, 0xc7, 0x20, 0x82, 0x3e, 0xd0, 0xdc, 0x2c}),
		// x2
		ed448.NewDecafScalar([]byte{
			0x05, 0x8e, 0x62, 0xb2, 0xa9, 0x76, 0x83, 0x6f,
			0xe1, 0x61, 0x69, 0x6b, 0x1a, 0x44, 0x6e, 0x20,
			0x29, 0xd3, 0x74, 0x48, 0x92, 0x07, 0xc3, 0xb9,
			0xeb, 0x13, 0x51, 0xd8, 0x9b, 0x2e, 0x0c, 0x8e,
			0x12, 0xe2, 0x74, 0x29, 0x9c, 0x99, 0x6d, 0xbc,
			0x28, 0x7b, 0xb3, 0x01, 0xac, 0x0a, 0xd0, 0x2f,
			0x36, 0x4e, 0x6b, 0xde, 0x3f, 0x0b, 0x43, 0x2b}),
		// y1
		ed448.NewDecafScalar([]byte{
			0x1b, 0x48, 0xd9, 0xf1, 0xc6, 0xc6, 0xa3, 0xb6,
			0x90, 0x19, 0xbb, 0xa9, 0xd9, 0x13, 0xf3, 0xb2,
			0xc0, 0xe4, 0x22, 0x39, 0x08, 0xd4, 0x36, 0x58,
			0xd0, 0xfe, 0xc8, 0x61, 0x64, 0x6f, 0x61, 0x7d,
			0x2d, 0x13, 0xab, 0xab, 0x30, 0xce, 0x0a, 0x6a,
			0xfe, 0xe6, 0xe3, 0x4c, 0xab, 0x14, 0x2e, 0x3d,
			0x9a, 0x86, 0x38, 0x2a, 0xfa, 0xc1, 0x28, 0x27}),
		// y2
		ed448.NewDecafScalar([]byte{
			0x57, 0x1f, 0x33, 0xb4, 0x5c, 0x70, 0x43, 0x26,
			0x32, 0xff, 0x9c, 0xb8, 0x11, 0x54, 0x6c, 0x03,
			0x83, 0xa8, 0x5b, 0x68, 0xbb, 0xba, 0x1d, 0x25,
			0x09, 0x12, 0xe4, 0xc7, 0x74, 0x3d, 0x42, 0xae,
			0x16, 0x22, 0x67, 0xad, 0x04, 0x03, 0x02, 0x91,
			0xb6, 0x54, 0x5f, 0x1f, 0xeb, 0x3b, 0x06, 0xea,
			0xef, 0x23, 0x55, 0xf7, 0xd2, 0xc8, 0x39, 0x27}),
		// z
		ed448.NewDecafScalar([]byte{
			0x50, 0xb7, 0x04, 0xdd, 0x0c, 0x8b, 0x9a, 0x33,
			0x36, 0x80, 0x25, 0x0d, 0x2d, 0xaa, 0x94, 0x62,
			0x3f, 0x6a, 0x4e, 0x0b, 0xdd, 0x43, 0xc9, 0x78,
			0x75, 0xff, 0xe1, 0xad, 0x28, 0x69, 0xb9, 0x2b,
			0xfc, 0x43, 0xec, 0xc0, 0x67, 0x78, 0xb4, 0x17,
			0xfb, 0xad, 0x1a, 0x2a, 0xae, 0xac, 0x76, 0x82,
			0x00, 0x93, 0x82, 0xc5, 0xce, 0x31, 0xbc, 0x16}),
	}
	priv, pub := deriveCramerShoupKeys(fixedRand(csRandData))

	c.Assert(expPub.c, DeepEquals, pub.c)
	c.Assert(expPub.d, DeepEquals, pub.d)
	c.Assert(expPub.h, DeepEquals, pub.h)

	c.Assert(expPriv.x1, DeepEquals, priv.x1)
	c.Assert(expPriv.x2, DeepEquals, priv.x2)
	c.Assert(expPriv.y1, DeepEquals, priv.y1)
	c.Assert(expPriv.y2, DeepEquals, priv.y2)
	c.Assert(expPriv.z, DeepEquals, priv.z)

}

func (s *OTR4Suite) Test_CramerShoupEncryption(c *C) {

	randData := []byte{
		0x40, 0x80, 0x66, 0x2d, 0xd8, 0xe7, 0xf0, 0x9c,
		0xdf, 0xb0, 0x4e, 0x1c, 0x6e, 0x12, 0x62, 0xa3,
		0x7c, 0x31, 0x9a, 0xe1, 0xe7, 0x86, 0x87, 0xcc,
		0x82, 0x05, 0x78, 0xe6, 0x44, 0x2f, 0x4f, 0x77,
		0x0e, 0xd1, 0xb4, 0x48, 0xa6, 0x05, 0x90, 0x5e,
		0xe7, 0xba, 0xfc, 0x25, 0x99, 0x99, 0xb8, 0xc3,
		0x90, 0x3e, 0xf4, 0xa3, 0x75, 0xee, 0x85, 0x32,
	}

	message := []byte{
		0xfd, 0xf1, 0x18, 0xbf, 0x8e, 0xc9, 0x64, 0xc7,
		0x94, 0x46, 0x49, 0xda, 0xcd, 0xac, 0x2c, 0xff,
		0x72, 0x5e, 0xb7, 0x61, 0x46, 0xf1, 0x93, 0xa6,
		0x70, 0x81, 0x64, 0x37, 0x7c, 0xec, 0x6c, 0xe5,
		0xc6, 0x8d, 0x8f, 0xa0, 0x43, 0x23, 0x45, 0x33,
		0x73, 0x79, 0xa6, 0x48, 0x57, 0xbb, 0x0f, 0x70,
		0x63, 0x8c, 0x62, 0x26, 0x9e, 0x17, 0x5d, 0x22,
	}

	pub := &cramerShoupPublicKey{
		// c
		ed448.NewPoint([16]uint32{
			0x08290f20, 0x0e84a2fe,
			0x093116ae, 0x0a2cf3aa,
			0x07c8f002, 0x0094dbda,
			0x0d35a081, 0x03a973f8,
			0x0602ec38, 0x0fb5739c,
			0x067815c5, 0x02d85827,
			0x016d0b78, 0x0c783a60,
			0x00e65cf8, 0x0e5e2c5e,
		},
			[16]uint32{
				0x015e1325, 0x0e82731e,
				0x020c4f72, 0x03de0bc5,
				0x095d725c, 0x0a73a2e5,
				0x05f13fbd, 0x0be2dbe6,
				0x0695401d, 0x0c5f1cfc,
				0x006a1437, 0x025dfc8b,
				0x0259fad2, 0x0a2e8a44,
				0x026cc8d3, 0x07610349,
			},
			[16]uint32{
				0x01573e52, 0x02cb3245,
				0x0c01480d, 0x0bd0a1cd,
				0x00a70916, 0x0f9e7c9c,
				0x0c61b7ca, 0x06d48745,
				0x002686be, 0x0b9efce9,
				0x0128cc93, 0x05c61ea7,
				0x008e9b70, 0x068ad694,
				0x0f75837b, 0x036dc03c,
			},
			[16]uint32{
				0x0c245679, 0x0edc5d7f,
				0x093c08b5, 0x0c1154bd,
				0x044b31a8, 0x01e20dd4,
				0x0384c9f6, 0x071d6974,
				0x09a8e436, 0x0ded16ac,
				0x079807f2, 0x0cca2839,
				0x06226c1a, 0x0e2f0066,
				0x048fdca1, 0x0c5bb507,
			},
		),
		// d
		ed448.NewPoint([16]uint32{
			0x0ec27dd8, 0x066272ab,
			0x0e313c61, 0x0586f1b3,
			0x05a7a1d7, 0x064f0f54,
			0x01e1a724, 0x019a09e9,
			0x0fbe5937, 0x098d95be,
			0x05ecbe99, 0x0a736742,
			0x006e1cdf, 0x0c9cf1b2,
			0x0bcfeffa, 0x0ca04a9c,
		},
			[16]uint32{
				0x0a36dd6b, 0x0d075858,
				0x06093a6d, 0x0d43f7e5,
				0x073cd5f6, 0x03ce6359,
				0x06ecee6a, 0x0d6cc582,
				0x0b5335b6, 0x0a873bbf,
				0x06a6d12c, 0x0cd0fa39,
				0x0edf4676, 0x0ea316a4,
				0x0b5ae6ba, 0x06793af6,
			},
			[16]uint32{
				0x014f9618, 0x0c523557,
				0x08e37cc7, 0x00680c90,
				0x0182ee90, 0x0679b038,
				0x0c943c0c, 0x0c3839d7,
				0x05dfe98b, 0x0d20714b,
				0x02cf865f, 0x0fe5e2c2,
				0x09b4a40b, 0x004206c4,
				0x03d83754, 0x0245bfb3,
			},
			[16]uint32{
				0x0e46e642, 0x0e143f26,
				0x00eb2244, 0x039136b2,
				0x075f8153, 0x05fae34f,
				0x0c3f42ed, 0x029bb2e2,
				0x0710e0a4, 0x001a6502,
				0x0db6d216, 0x04765aa6,
				0x047c1435, 0x0ac184e0,
				0x0704cc33, 0x0b50d91f,
			},
		),
		// h
		ed448.NewPoint([16]uint32{
			0x0423e798, 0x05fb02d9,
			0x0bf3f8fd, 0x0ae3d12d,
			0x0c140b29, 0x068bc613,
			0x08acd122, 0x0f246d71,
			0x02a8efba, 0x0658139f,
			0x001d2aac, 0x064d8554,
			0x01602a08, 0x030b7200,
			0x0c62265f, 0x055c5eee,
		},
			[16]uint32{
				0x0d5742b2, 0x0cb48dd8,
				0x0665b312, 0x0e841d74,
				0x0167d334, 0x0b4a8678,
				0x037b43f2, 0x01c27b2d,
				0x0a740c2f, 0x0c413062,
				0x08c9abda, 0x022a4cf9,
				0x0d6c49ea, 0x00b4ec09,
				0x09fdc6b7, 0x0700e163,
			},
			[16]uint32{
				0x021175ea, 0x01f851d2,
				0x02609418, 0x01eb2354,
				0x0fdb265d, 0x0bf5f855,
				0x0f02d8b8, 0x03964227,
				0x0647ff08, 0x0dfa5761,
				0x0851b34b, 0x0b6dae86,
				0x0c73e400, 0x01fa9378,
				0x0fa01d3c, 0x065d7548,
			},
			[16]uint32{
				0x0629c26e, 0x02cdb278,
				0x06e06582, 0x067295f0,
				0x0e3404f1, 0x08a55f6b,
				0x04ccd74e, 0x0841e8e7,
				0x0645b383, 0x05b6d03c,
				0x030c4ff3, 0x00e518a4,
				0x0ef4ad0a, 0x000554d4,
				0x032fa788, 0x0ede9c21,
			},
		),
	}

	expCipher := []byte{
		0xc0, 0xee, 0xfa, 0x10, 0x0e, 0x77, 0x50, 0xfe,
		0xfa, 0xc3, 0xff, 0x7d, 0x89, 0x88, 0x98, 0xb8,
		0xd3, 0xc6, 0x6c, 0x7c, 0x0f, 0xc8, 0xff, 0x2f,
		0x8c, 0x89, 0xb0, 0xc4, 0x72, 0x7a, 0x1c, 0x11,
		0xb0, 0x12, 0x99, 0x77, 0x42, 0x0c, 0xdf, 0x73,
		0x74, 0x42, 0x33, 0x24, 0x10, 0x2d, 0xbd, 0xdf,
		0xdc, 0x49, 0x24, 0x91, 0x43, 0x07, 0x8c, 0x38,
		0xbf, 0x5b, 0x5c, 0x33, 0xa7, 0x69, 0x65, 0xd4,
		0xc0, 0x14, 0x0e, 0x45, 0xf6, 0x8d, 0x79, 0xba,
		0x14, 0xbb, 0x95, 0xdc, 0xde, 0xe3, 0xb3, 0x25,
		0x46, 0xf6, 0x7b, 0x1d, 0x5a, 0x83, 0x70, 0x5e,
		0x6c, 0x31, 0x8a, 0x58, 0x22, 0x0f, 0x59, 0xfe,
		0x1b, 0x7c, 0x7d, 0x94, 0x30, 0x8c, 0xa0, 0xbb,
		0xf1, 0x82, 0xf8, 0x7c, 0xa5, 0x76, 0x6e, 0x68,
		0x08, 0x3f, 0x90, 0x29, 0xf4, 0x54, 0xc2, 0x35,
		0x9e, 0x84, 0x99, 0x92, 0xe4, 0xfe, 0x33, 0xc0,
		0x96, 0xce, 0x6a, 0x08, 0x9b, 0xa5, 0x7b, 0x50,
		0x78, 0x9a, 0x1a, 0x9c, 0x4d, 0xe0, 0xc1, 0x20,
		0x85, 0x2c, 0xf8, 0x2f, 0xf8, 0xe6, 0x8f, 0xcb,
		0xb9, 0x25, 0x4d, 0x82, 0x86, 0x82, 0x94, 0xd0,
		0xd7, 0x67, 0x5e, 0x06, 0x31, 0x97, 0x88, 0x1c,
		0x24, 0x10, 0x20, 0xbe, 0x5b, 0x53, 0x0d, 0xba,
		0x4c, 0x6c, 0x90, 0x4d, 0xb5, 0x55, 0xaa, 0xa7,
		0x86, 0x28, 0xdc, 0xda, 0xb6, 0x4a, 0x7e, 0x9a,
		0x9a, 0x7e, 0x19, 0x3b, 0x97, 0x4f, 0xf2, 0x82,
		0x66, 0x17, 0xe4, 0xae, 0x50, 0xd8, 0x64, 0x72,
		0xad, 0x84, 0x4e, 0xc2, 0x85, 0x8b, 0x0e, 0xb3,
		0x0f, 0x43, 0xb8, 0x92, 0x90, 0x7c, 0xff, 0x20,
	}

	cipher, err := cramerShoupEnc(message, fixedRand(randData), pub)
	c.Assert(cipher, DeepEquals, expCipher)
	c.Assert(err, IsNil)
}
