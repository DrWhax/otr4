package otr4

import (
	"crypto/rand"

	"github.com/twstrike/ed448"
	. "gopkg.in/check.v1"
)

func (s *OTR4Suite) Test_CramerShoupKeyDerivation(c *C) {
	csRandData := []byte{
		// x1
		0x40, 0x80, 0x66, 0x2d, 0xd8, 0xe7, 0xf0, 0x9c,
		0xdf, 0xb0, 0x4e, 0x1c, 0x6e, 0x12, 0x62, 0xa3,
		0x7c, 0x31, 0x9a, 0xe1, 0xe7, 0x86, 0x87, 0xcc,
		0x82, 0x05, 0x78, 0xe6, 0x44, 0x2f, 0x4f, 0x77,
		0x0e, 0xd1, 0xb4, 0x48, 0xa6, 0x05, 0x90, 0x5e,
		0xe7, 0xba, 0xfc, 0x25, 0x99, 0x99, 0xb8, 0xc3,
		0x90, 0x3e, 0xf4, 0xa3, 0x75, 0xee, 0x85, 0x32,
		// x2
		0x16, 0xb1, 0x06, 0x5b, 0x81, 0xea, 0xac, 0xb3,
		0x69, 0x47, 0x6d, 0xa2, 0xaa, 0x86, 0x0b, 0xe5,
		0xcd, 0xac, 0x43, 0xd7, 0xb7, 0xe3, 0xb0, 0x85,
		0xd8, 0x66, 0xf9, 0xb6, 0x45, 0x2e, 0x81, 0x43,
		0xc2, 0x6f, 0x61, 0xc4, 0xdd, 0x65, 0x35, 0xa4,
		0xa4, 0xf9, 0x55, 0xf0, 0xf9, 0xd2, 0xf4, 0xb7,
		0xa4, 0xf9, 0x55, 0xf0, 0xf9, 0xd2, 0xf4, 0xb7,
		// y1
		0x52, 0x18, 0x41, 0x48, 0x60, 0x2d, 0x67, 0x8a,
		0xd3, 0xf3, 0xd2, 0xa4, 0xfd, 0x6f, 0x64, 0xf3,
		0x72, 0x82, 0xb0, 0x6a, 0x4d, 0xea, 0x9c, 0xef,
		0x99, 0x05, 0xe1, 0x8d, 0xaf, 0x2d, 0xdb, 0x52,
		0x57, 0x00, 0xac, 0x45, 0x24, 0x24, 0xb4, 0x79,
		0x02, 0x5f, 0x99, 0x70, 0x95, 0x2a, 0x90, 0x08,
		0x02, 0x5f, 0x99, 0x70, 0x95, 0x2a, 0x90, 0x08,
		// y2
		0x51, 0x5b, 0x69, 0x03, 0xd5, 0x77, 0xb0, 0x77,
		0x35, 0x1f, 0x1b, 0x2d, 0xb1, 0x26, 0xf1, 0x69,
		0x3b, 0xcc, 0x4b, 0x0a, 0x95, 0x83, 0xd7, 0xec,
		0xfa, 0x8c, 0xf7, 0x80, 0xbe, 0x9b, 0x6d, 0xb4,
		0xc3, 0x24, 0x3c, 0x94, 0x9b, 0x63, 0xbc, 0x89,
		0xbc, 0x09, 0x39, 0xb8, 0xbf, 0xa2, 0x9b, 0xf4,
		0x3a, 0xa2, 0x9b, 0xbe, 0x6e, 0x78, 0x7b, 0x11,
		// z
		0x66, 0x60, 0x01, 0xb9, 0x83, 0x10, 0xd5, 0x7d,
		0xe4, 0x86, 0x58, 0x0a, 0x42, 0xd2, 0x2a, 0x74,
		0xe9, 0x5d, 0x77, 0xc4, 0x08, 0x46, 0x31, 0xb4,
		0x75, 0x1b, 0xf2, 0x67, 0x23, 0x19, 0x5e, 0xb6,
		0xfc, 0xe8, 0xd1, 0x38, 0x81, 0xa3, 0x98, 0x41,
		0xdf, 0xdf, 0x5d, 0x8d, 0x41, 0xb4, 0x66, 0x0f,
		0x39, 0xe1, 0x6f, 0x8c, 0x89, 0xed, 0xf6, 0x11,
	}

	expPub := &cramerShoupPublicKey{
		// c
		ed448.NewPoint(
			[16]uint32{
				0x03ec8f96, 0x0d40670b, 0x0ac03fe7, 0x0956b651,
				0x0145e610, 0x03c89f01, 0x0a22e379, 0x0b0f5279,
				0x07fe2e6b, 0x0053b1ba, 0x072b1f72, 0x0cb078af,
				0x035a049b, 0x07e768e3, 0x01860b6a, 0x0762aebf,
			},
			[16]uint32{
				0x0c5319c5, 0x0a858447, 0x09609079, 0x02b2d222,
				0x0b3d6a8d, 0x041554d7, 0x0baf026e, 0x0129aac5,
				0x0b69553c, 0x04318fb5, 0x0ef1fc50, 0x07f45076,
				0x00d3c501, 0x0ef75db9, 0x008a0370, 0x095a0f3d,
			},
			[16]uint32{
				0x0550719b, 0x0597cebc, 0x0b44b3a7, 0x02dd5c82,
				0x0709fbe3, 0x0dcd450f, 0x013e75ec, 0x08a35968,
				0x02d1073c, 0x0731abc2, 0x0e1abb8e, 0x01e01b38,
				0x00c8a515, 0x0fa7ff47, 0x05ec3cc5, 0x0efe9e8e,
			},
			[16]uint32{
				0x01d3e461, 0x0a4f4114, 0x06f31b7e, 0x02fe6996,
				0x0f0602a8, 0x0d550a82, 0x00aaea26, 0x0e741792,
				0x0d0d9c93, 0x0847f70c, 0x0fd814b1, 0x022a9768,
				0x095cd0e3, 0x0ade222d, 0x06835bbd, 0x00ae74fa,
			},
		),
		// d
		ed448.NewPoint(
			[16]uint32{
				0x04cc98b8, 0x0aee5526, 0x0deec7ca, 0x03b955ca,
				0x0c9aa144, 0x05a7672d, 0x08f5f53b, 0x03a6963f,
				0x01ea8ec4, 0x0f42b22c, 0x08d7f50d, 0x08ef4899,
				0x029c4fa5, 0x0e5d32f8, 0x0e0f2f1b, 0x0bfc8d3c,
			},
			[16]uint32{
				0x0ee0f693, 0x01e5d3ef, 0x009e0f46, 0x0cd9d776,
				0x0f2c11fa, 0x0d424328, 0x04ace98d, 0x09574f9e,
				0x0f04b094, 0x0c23e744, 0x0cf292c7, 0x09f7df44,
				0x0be029ce, 0x0a60f67d, 0x0797fbf3, 0x0bbb568c,
			},
			[16]uint32{
				0x0f7be5f8, 0x09b2c468, 0x05104f8d, 0x0a4deedc,
				0x0221a851, 0x094b06f2, 0x0185d125, 0x08e747f2,
				0x00b4d17f, 0x0230798a, 0x046de54d, 0x0323e7bc,
				0x09d43f4c, 0x023ee2a9, 0x0af88db3, 0x0672cc85,
			},
			[16]uint32{
				0x049fc147, 0x00ecb653, 0x0fb574a7, 0x03eff8d7,
				0x05b6a752, 0x069d5481, 0x09719845, 0x0a436b44,
				0x05230555, 0x09851029, 0x044f9c9d, 0x069d289f,
				0x0b9314a4, 0x0f35dd2f, 0x0e8e816a, 0x00355c7d,
			},
		),
		// h
		ed448.NewPoint(
			[16]uint32{
				0x0dc2c86b, 0x062aa269, 0x04784c9d, 0x01750bcf,
				0x00683731, 0x0b198881, 0x0a36ee98, 0x0c24e6cb,
				0x0669a4ce, 0x01980f31, 0x0b1e6f4c, 0x08bdd701,
				0x08d950a1, 0x07bb8ae8, 0x0840a4e0, 0x01cef363,
			},
			[16]uint32{
				0x01ce8ca2, 0x0cc89a87, 0x0188519f, 0x092cebb4,
				0x097a3274, 0x0dbee214, 0x0bdd1dd3, 0x0271ec23,
				0x0d28e056, 0x02c21b7e, 0x0f60b334, 0x0e4b4223,
				0x0f473d83, 0x089718a9, 0x0b075869, 0x0700c433,
			},
			[16]uint32{
				0x035cd394, 0x07926b4e, 0x01d6652e, 0x0baacce0,
				0x0a29339d, 0x08b71b6a, 0x088184c8, 0x099a6fc8,
				0x0d8abc38, 0x0055c583, 0x0bcf735e, 0x03df44e4,
				0x06928a16, 0x0ef21a23, 0x00234218, 0x007d2dd1,
			},
			[16]uint32{
				0x0fb7cd8c, 0x0a32ac22, 0x03199605, 0x0607c466,
				0x0eddad7f, 0x08a71cfc, 0x066944f7, 0x020576e5,
				0x03202796, 0x0138fefd, 0x038b840f, 0x00272913,
				0x0c3082e6, 0x07d44546, 0x0b332340, 0x0b6f354d,
			},
		),
	}

	expPriv := &cramerShoupPrivateKey{
		// x1
		ed448.NewDecafScalar([]byte{
			0xc6, 0xd0, 0x98, 0x2e, 0xe4, 0xe5, 0x81, 0xe4,
			0x61, 0x3c, 0x46, 0x99, 0x0a, 0x37, 0x79, 0xc3,
			0xfa, 0xe5, 0xd5, 0x29, 0x27, 0x31, 0xa3, 0x55,
			0x9f, 0x34, 0x91, 0xd1, 0x0c, 0x7f, 0x88, 0x56,
			0x8c, 0x62, 0xe1, 0x86, 0xb7, 0xef, 0xd6, 0xcb,
			0x1b, 0x14, 0x88, 0x3b, 0xc0, 0xfb, 0xac, 0x46,
			0x0c, 0xc7, 0x20, 0x82, 0x3e, 0xd0, 0xdc, 0x2c}),
		// x2
		ed448.NewDecafScalar([]byte{
			0x7d, 0xbc, 0x55, 0xd7, 0xab, 0x95, 0xd3, 0xca,
			0xb7, 0x40, 0x1f, 0x64, 0xf4, 0xd3, 0x60, 0x2b,
			0xa0, 0xec, 0xed, 0x92, 0x90, 0xf7, 0xc4, 0x5c,
			0x51, 0xd0, 0x22, 0xd7, 0x5e, 0xf1, 0xee, 0x6c,
			0xd3, 0xf9, 0x2b, 0xea, 0xbf, 0x49, 0x94, 0xda,
			0xa5, 0x2c, 0x3b, 0x77, 0xdc, 0x98, 0x0c, 0xc6,
			0x36, 0xdf, 0xb9, 0x49, 0x7b, 0x54, 0x70, 0x05}),
		// y1
		ed448.NewDecafScalar([]byte{
			0xa5, 0x08, 0xbe, 0x0a, 0x34, 0x92, 0x1b, 0xfc,
			0x23, 0x3e, 0xb1, 0x4b, 0x82, 0x75, 0xa1, 0x9b,
			0x52, 0x85, 0xa6, 0xc5, 0x29, 0x59, 0x4a, 0x5e,
			0xe6, 0x1b, 0x69, 0xa0, 0x47, 0xf9, 0xcf, 0xed,
			0xa9, 0xfa, 0x15, 0xd3, 0x5f, 0x16, 0x11, 0xe7,
			0xa1, 0x84, 0x33, 0x1b, 0x07, 0x84, 0x18, 0x6c,
			0x6a, 0xb0, 0xfa, 0xdb, 0x95, 0x82, 0x26, 0x2c}),
		// y2
		ed448.NewDecafScalar([]byte{
			0x8b, 0xa2, 0xa9, 0x1a, 0xf1, 0x0b, 0x04, 0x96,
			0x92, 0xf9, 0xd5, 0x97, 0x27, 0x96, 0x6c, 0x8f,
			0x55, 0x6e, 0xf8, 0xdc, 0x85, 0x77, 0xf6, 0x66,
			0x46, 0xf4, 0x2a, 0xcd, 0x8e, 0x42, 0x83, 0xd8,
			0xd2, 0x95, 0xed, 0xc7, 0x24, 0x19, 0x72, 0xf6,
			0xe2, 0xdd, 0x3e, 0x21, 0x3e, 0x3a, 0x35, 0x65,
			0xfc, 0x78, 0x2c, 0x50, 0xfd, 0x0b, 0xfe, 0x1c}),
		// z
		ed448.NewDecafScalar([]byte{
			0x5b, 0x39, 0x3a, 0xce, 0x70, 0xc2, 0x97, 0x9c,
			0x78, 0x00, 0x74, 0xb9, 0x79, 0xac, 0xfb, 0xff,
			0xa7, 0xb8, 0x5c, 0x64, 0x6b, 0x5a, 0x4d, 0xb3,
			0x59, 0x1b, 0x31, 0x20, 0x4d, 0xdb, 0x16, 0xa5,
			0xf9, 0xb2, 0x88, 0x69, 0x13, 0xf1, 0xb1, 0xf1,
			0x4e, 0x5c, 0x05, 0x2f, 0x9e, 0xed, 0x3e, 0xf0,
			0x6f, 0xe8, 0x4e, 0x81, 0x49, 0x31, 0xfe, 0x3b}),
	}
	priv, pub, err := deriveCramerShoupKeys(fixedRand(csRandData))

	c.Assert(expPub.c, DeepEquals, pub.c)
	c.Assert(expPub.d, DeepEquals, pub.d)
	c.Assert(expPub.h, DeepEquals, pub.h)
	c.Assert(err, IsNil)

	c.Assert(expPriv.x1, DeepEquals, priv.x1)
	c.Assert(expPriv.x2, DeepEquals, priv.x2)
	c.Assert(expPriv.y1, DeepEquals, priv.y1)
	c.Assert(expPriv.y2, DeepEquals, priv.y2)
	c.Assert(expPriv.z, DeepEquals, priv.z)

}

func (s *OTR4Suite) Test_CramerShoupEncryption(c *C) {
	randData := []byte{
		0xd5, 0xde, 0xed, 0x1a, 0xef, 0x64, 0xee, 0x90,
		0xab, 0xae, 0xbd, 0x66, 0xda, 0xe9, 0x9b, 0xe0,
		0xe9, 0x7e, 0xab, 0x4d, 0x8a, 0xd0, 0xbb, 0x9c,
		0xd1, 0xef, 0xde, 0x06, 0x95, 0x91, 0xf6, 0xed,
		0xb2, 0x43, 0xab, 0x41, 0x26, 0x1d, 0x27, 0xd4,
		0xb4, 0x6d, 0xa5, 0x37, 0xb3, 0x39, 0x7a, 0x5a,
		0x74, 0xb4, 0x2b, 0x72, 0xb5, 0x4d, 0xfe, 0x08,
	}

	message := []byte{
		0xfd, 0xf1, 0x18, 0xbf, 0x8e, 0xc9, 0x64, 0xc7,
		0x94, 0x46, 0x49, 0xda, 0xcd, 0xac, 0x2c, 0xff,
		0x72, 0x5e, 0xb7, 0x61, 0x46, 0xf1, 0x93, 0xa6,
		0x70, 0x81, 0x64, 0x37, 0x7c, 0xec, 0x6c, 0xe5,
		0xc6, 0x8d, 0x8f, 0xa0, 0x43, 0x23, 0x45, 0x33,
		0x73, 0x79, 0xa6, 0x48, 0x57, 0xbb, 0x0f, 0x70,
		0x63, 0x8c, 0x62, 0x26, 0x9e, 0x17, 0x5d, 0x22,
	}

	pub := &cramerShoupPublicKey{
		// c
		ed448.NewPoint([16]uint32{
			0x0d1a3bb0, 0x0d4ed3d5, 0x0bee72e7, 0x07a57757,
			0x033114fb, 0x0af889a9, 0x07a4915e, 0x051f6631,
			0x0ee14f8d, 0x02fd5f70, 0x08811f82, 0x0fffb838,
			0x0f531141, 0x0130c68e, 0x011fa21d, 0x0730a635,
		},
			[16]uint32{
				0x0e731b10, 0x06225b69, 0x0a0fcf44, 0x0e8f3bf3,
				0x0896c850, 0x07d1d0a0, 0x0a3643b4, 0x0344cdcb,
				0x0e744b0a, 0x08b7171a, 0x08b8ecd5, 0x0913c73a,
				0x0f0e91a6, 0x0fa87618, 0x0f53f773, 0x096ec324,
			},
			[16]uint32{
				0x0236cc03, 0x02cae89f, 0x0fa2201a, 0x0f50f406,
				0x067620d3, 0x0835ebbc, 0x01ec4469, 0x07568d88,
				0x0323640e, 0x0e0fcc51, 0x06b8c60c, 0x0758f2c4,
				0x0ca64f94, 0x0df17830, 0x0f12e81c, 0x0a22c62f,
			},
			[16]uint32{
				0x0f0a7999, 0x05faf1c5, 0x04474254, 0x01bf3e07,
				0x09634366, 0x0431a64e, 0x01b2779e, 0x08ab476c,
				0x0f69a009, 0x01a86bac, 0x0ddf3e82, 0x084f551b,
				0x0c0476fe, 0x0051fbcc, 0x05241871, 0x05969360,
			},
		),
		// d
		ed448.NewPoint([16]uint32{
			0x0d1a3bb0, 0x0d4ed3d5, 0x0bee72e7, 0x07a57757,
			0x033114fb, 0x0af889a9, 0x07a4915e, 0x051f6631,
			0x0ee14f8d, 0x02fd5f70, 0x08811f82, 0x0fffb838,
			0x0f531141, 0x0130c68e, 0x011fa21d, 0x0730a635,
		},
			[16]uint32{
				0x0e731b10, 0x06225b69, 0x0a0fcf44, 0x0e8f3bf3,
				0x0896c850, 0x07d1d0a0, 0x0a3643b4, 0x0344cdcb,
				0x0e744b0a, 0x08b7171a, 0x08b8ecd5, 0x0913c73a,
				0x0f0e91a6, 0x0fa87618, 0x0f53f773, 0x096ec324,
			},
			[16]uint32{
				0x0236cc03, 0x02cae89f, 0x0fa2201a, 0x0f50f406,
				0x067620d3, 0x0835ebbc, 0x01ec4469, 0x07568d88,
				0x0323640e, 0x0e0fcc51, 0x06b8c60c, 0x0758f2c4,
				0x0ca64f94, 0x0df17830, 0x0f12e81c, 0x0a22c62f,
			},
			[16]uint32{
				0x0f0a7999, 0x05faf1c5, 0x04474254, 0x01bf3e07,
				0x09634366, 0x0431a64e, 0x01b2779e, 0x08ab476c,
				0x0f69a009, 0x01a86bac, 0x0ddf3e82, 0x084f551b,
				0x0c0476fe, 0x0051fbcc, 0x05241871, 0x05969360,
			},
		),
		// h
		ed448.NewPoint([16]uint32{
			0x03dcc290, 0x0c997800, 0x03ccf175, 0x0f6d5cca,
			0x0c39f63d, 0x087e19c3, 0x0015f977, 0x0f5ac8ea,
			0x0025900b, 0x049af15a, 0x036d30d9, 0x00e8a4a5,
			0x092085ea, 0x0ed2cdd7, 0x0b9a5ab6, 0x0dce53c5,
		},
			[16]uint32{
				0x09e68bde, 0x0fc1025b, 0x0940ad81, 0x0f607940,
				0x03581b48, 0x0ddf609a, 0x0b1e3cc3, 0x042665f3,
				0x0ec0569a, 0x0445a714, 0x007fe1f2, 0x0e8af1a9,
				0x0f432c2a, 0x0a456054, 0x06dcfc13, 0x0bfd6853,
			},
			[16]uint32{
				0x0fdb7132, 0x0fc94fb3, 0x0f54cbda, 0x02fe2aed,
				0x0d592362, 0x03217544, 0x0bf9b081, 0x0619628e,
				0x09a377f6, 0x0bb30a69, 0x0fa2dddd, 0x037190cf,
				0x01b73e76, 0x02253287, 0x0183881c, 0x08212151,
			},
			[16]uint32{
				0x07507a9d, 0x0edfff2a, 0x0f81885e, 0x0ef133d0,
				0x05d7e8ec, 0x0dd531b2, 0x0cfff6a4, 0x0e58ed2b,
				0x0aacca3d, 0x03fa90ed, 0x0808c373, 0x0a5b35f3,
				0x092effcc, 0x0790c7dd, 0x0cbf84c2, 0x0a177973,
			},
		),
	}

	expCipher := []byte{
		0x48, 0x61, 0xee, 0x01, 0xc0, 0xcb, 0xe4, 0xba,
		0x78, 0xe6, 0x51, 0xe6, 0x6a, 0xfb, 0x1e, 0xfb,
		0x1c, 0x1e, 0xce, 0xf0, 0xc3, 0xbb, 0xfc, 0x0a,
		0x50, 0x47, 0xd6, 0xfa, 0x05, 0xc8, 0x12, 0xd0,
		0x8a, 0xd7, 0xa4, 0x6c, 0x98, 0xb6, 0x29, 0x25,
		0x45, 0x07, 0xf5, 0x42, 0x90, 0xbc, 0x6e, 0x96,
		0x76, 0x5b, 0x2d, 0xcd, 0x2d, 0x9e, 0x72, 0x6e,
		0xb4, 0x4e, 0x22, 0xff, 0x5f, 0xca, 0x2a, 0x5e,
		0xfa, 0x01, 0x0b, 0x0c, 0x06, 0x98, 0x3b, 0x48,
		0x67, 0xc0, 0x06, 0x19, 0x86, 0x2a, 0x1a, 0x6c,
		0xb1, 0x7d, 0x62, 0x6b, 0x77, 0x2b, 0xe5, 0x93,
		0x26, 0x5f, 0xee, 0x96, 0x93, 0x5f, 0x65, 0x38,
		0x13, 0x1d, 0x60, 0x41, 0x96, 0x40, 0x4d, 0x0c,
		0x1f, 0xb0, 0xbb, 0xea, 0x2b, 0x85, 0xee, 0x7e,
		0xd7, 0x9f, 0x7d, 0xfd, 0x18, 0x6e, 0x5a, 0xfa,
		0x54, 0xfc, 0xca, 0x84, 0x8b, 0x72, 0xb6, 0x11,
		0xed, 0xc5, 0x6c, 0x81, 0x11, 0x4f, 0x99, 0xaf,
		0x7b, 0x7d, 0x30, 0xf2, 0xa7, 0x84, 0x9f, 0x92,
		0x9e, 0x59, 0x75, 0x10, 0x88, 0xc1, 0x8d, 0x27,
		0x46, 0xdc, 0x23, 0xc3, 0x3c, 0xaa, 0x39, 0xc1,
		0x4d, 0x5c, 0x28, 0x15, 0xaf, 0xb4, 0xf7, 0x49,
		0xa0, 0xc4, 0xb8, 0x14, 0x1e, 0xc6, 0xe1, 0x90,
		0xca, 0xd6, 0xef, 0xce, 0xf5, 0xae, 0xbb, 0x45,
		0xe1, 0x1a, 0xb2, 0x29, 0x85, 0x37, 0x03, 0x86,
		0x6f, 0x07, 0x05, 0x98, 0x0a, 0xfb, 0x68, 0xbd,
		0x46, 0x2d, 0x91, 0xe9, 0x16, 0x45, 0xe5, 0xf2,
		0x05, 0xbc, 0xcf, 0xf0, 0xdd, 0xec, 0x3d, 0x70,
		0x14, 0xfc, 0xd7, 0x48, 0xd7, 0xbb, 0x46, 0x19,
	}

	cipher, err := cramerShoupEnc(message, fixedRand(randData), pub)
	c.Assert(cipher, DeepEquals, expCipher)
	c.Assert(err, IsNil)
}

func (s *OTR4Suite) Test_CramerShoupDecryption(c *C) {
	cipher := []byte{
		0xc7, 0x0d, 0x0a, 0x93, 0xfa, 0xb7, 0x1d, 0xc7,
		0xd8, 0x8d, 0x5d, 0x68, 0x83, 0x6f, 0x1c, 0xbb,
		0xea, 0x6c, 0xb1, 0x1c, 0x4f, 0xb8, 0x9e, 0x32,
		0x23, 0xa5, 0x4b, 0x71, 0x28, 0x06, 0xe0, 0xab,
		0xb7, 0xed, 0xb7, 0x23, 0xcd, 0x22, 0x04, 0x91,
		0xb0, 0x01, 0xc0, 0xca, 0xe5, 0xd8, 0x1e, 0xab,
		0xb1, 0x9d, 0x32, 0xda, 0x16, 0x2b, 0x78, 0x58,
		0x73, 0x46, 0xe2, 0xaa, 0x85, 0xd7, 0x65, 0x95,
		0x1a, 0x78, 0x38, 0x97, 0x5c, 0x47, 0xd1, 0xd8,
		0x6d, 0xd1, 0xa6, 0xaf, 0x5d, 0x2f, 0xdf, 0xd0,
		0x07, 0x87, 0x5f, 0x85, 0x28, 0xef, 0x1a, 0x17,
		0xe0, 0x99, 0x88, 0xf7, 0xa9, 0xe9, 0x50, 0xd9,
		0x14, 0x78, 0x2d, 0x22, 0x9d, 0xa5, 0x01, 0x67,
		0x4f, 0xa8, 0x8e, 0xb9, 0x6f, 0x7e, 0x67, 0x67,
		0xdc, 0x78, 0x0d, 0x74, 0x58, 0x26, 0x36, 0x57,
		0xb4, 0x22, 0xd9, 0xf4, 0xad, 0x0a, 0xbc, 0x35,
		0x37, 0x63, 0x86, 0x35, 0xc8, 0x12, 0x0d, 0xc0,
		0x9d, 0x69, 0x99, 0x2d, 0xd6, 0xf8, 0x04, 0x41,
		0xfd, 0x49, 0xed, 0x08, 0xf7, 0x2b, 0x2f, 0x16,
		0x86, 0x43, 0xeb, 0x57, 0x93, 0xcf, 0x03, 0xec,
		0xbe, 0xff, 0xf7, 0x0c, 0xd6, 0x76, 0x0f, 0x38,
		0xeb, 0x22, 0x45, 0x68, 0x0e, 0xcc, 0x32, 0x6e,
		0x40, 0x26, 0x24, 0xbf, 0xb8, 0x41, 0x45, 0xc4,
		0xda, 0x9c, 0x5a, 0xf2, 0x51, 0xcd, 0xa7, 0x1b,
		0xa3, 0x46, 0xd5, 0x7f, 0xe8, 0xb2, 0x04, 0x16,
		0xf1, 0xfe, 0x11, 0x02, 0x76, 0x40, 0x4a, 0xdf,
		0x9e, 0x2f, 0xaf, 0xaf, 0x7f, 0x59, 0x82, 0x96,
		0x6b, 0xda, 0xb0, 0x55, 0x02, 0xd8, 0x0f, 0x14,
	}

	priv := &cramerShoupPrivateKey{
		// x1
		ed448.NewDecafScalar([]byte{
			0xc1, 0xd9, 0xe2, 0xfb, 0xb1, 0x30, 0x6d, 0x08,
			0x56, 0xbb, 0x23, 0xb3, 0x48, 0xd1, 0x41, 0xeb,
			0xe2, 0x33, 0x17, 0x6b, 0x95, 0x73, 0xc3, 0x8d,
			0x11, 0x78, 0x30, 0x2b, 0x80, 0xef, 0x0d, 0xdd,
			0xcc, 0x47, 0xeb, 0x8a, 0xa6, 0xe0, 0xa3, 0x1d,
			0xc5, 0x25, 0xd5, 0x47, 0x27, 0x82, 0x65, 0x8a,
			0xe6, 0x72, 0xa2, 0x1b, 0xed, 0x2b, 0x8a, 0x3d,
		},
		),
		// x2
		ed448.NewDecafScalar([]byte{
			0x8b, 0x3b, 0xd8, 0xe5, 0xe3, 0x16, 0x41, 0x17,
			0x57, 0x1a, 0x2d, 0xdc, 0x07, 0x1b, 0xe9, 0x7f,
			0x89, 0x07, 0xcc, 0xb7, 0x6d, 0x42, 0x87, 0x65,
			0x69, 0x3c, 0x03, 0x7d, 0x24, 0x40, 0xd9, 0x68,
			0xa7, 0x73, 0x3b, 0x17, 0x5b, 0xa8, 0x3b, 0x75,
			0x47, 0x84, 0x68, 0x1a, 0xcc, 0x17, 0xeb, 0xfb,
			0x03, 0x1a, 0xce, 0x13, 0x8b, 0xb4, 0x9f, 0x16,
		},
		),
		// y1
		ed448.NewDecafScalar([]byte{
			0xdc, 0xbb, 0xc2, 0xc1, 0x38, 0xdd, 0xc2, 0x1b,
			0xb3, 0x75, 0x6f, 0x67, 0xb7, 0xdb, 0x3a, 0x90,
			0x1b, 0x6e, 0x47, 0x5b, 0xe8, 0xe4, 0x72, 0x88,
			0xf4, 0xec, 0x24, 0x38, 0x75, 0x3b, 0x6f, 0x79,
			0x78, 0xcc, 0x84, 0x48, 0xd3, 0x07, 0xb9, 0xfe,
			0x5e, 0x8a, 0xb8, 0xf2, 0xe7, 0xb2, 0x41, 0xf0,
			0xde, 0xea, 0xba, 0xf5, 0x25, 0x2e, 0x6c, 0x2f,
		},
		),
		// y2
		ed448.NewDecafScalar([]byte{
			0xf9, 0xa7, 0x3c, 0x16, 0x0d, 0xa9, 0xf3, 0x3e,
			0x41, 0x41, 0x88, 0x90, 0x69, 0x5d, 0x4d, 0x55,
			0xa7, 0x9b, 0x9d, 0x88, 0x6e, 0x3c, 0xc8, 0x7e,
			0x0e, 0x7b, 0x07, 0x14, 0x1a, 0x57, 0x1c, 0x18,
			0x80, 0xcb, 0x8a, 0x71, 0x91, 0xb1, 0xfe, 0x36,
			0xd2, 0x5e, 0x2f, 0x40, 0x06, 0x92, 0x00, 0x31,
			0xa0, 0x46, 0xd8, 0x1a, 0xbc, 0x53, 0x83, 0x2f,
		},
		),
		// z
		ed448.NewDecafScalar([]byte{
			0x13, 0xa6, 0x7f, 0x47, 0xa4, 0x42, 0xbb, 0x3a,
			0x08, 0xd4, 0x8c, 0x9a, 0x2c, 0x4b, 0xca, 0xf5,
			0xbc, 0xb7, 0xd9, 0x13, 0x6a, 0x96, 0x14, 0xf0,
			0x23, 0xf5, 0x7f, 0x8e, 0x86, 0x50, 0x3d, 0xf7,
			0x0e, 0x0b, 0xf3, 0x92, 0x3c, 0x83, 0x41, 0x43,
			0x1b, 0x0b, 0x13, 0x66, 0xac, 0x06, 0x94, 0x30,
			0x22, 0xbf, 0x2e, 0x24, 0x2e, 0x76, 0x52, 0x0a,
		},
		),
	}

	expMessage := []byte{
		0x12, 0xea, 0x4a, 0x61, 0x69, 0x6b, 0x8e, 0xc4,
		0x14, 0x07, 0x8e, 0xe3, 0xdc, 0x41, 0xda, 0x38,
		0xcc, 0x1e, 0x19, 0x23, 0xbc, 0xce, 0xf5, 0x45,
		0xe5, 0x8b, 0x78, 0xb0, 0x01, 0x58, 0x1c, 0xf4,
		0x41, 0x15, 0x9a, 0x45, 0x5a, 0xe7, 0x09, 0xae,
		0xa1, 0x60, 0x08, 0xa9, 0x96, 0x9d, 0x3d, 0x7d,
		0xfe, 0xf1, 0x54, 0xd4, 0x82, 0x03, 0x73, 0x52,
	}

	message, err := cramerShoupDec(cipher, priv)
	c.Assert(message, DeepEquals, expMessage)
	c.Assert(err, IsNil)

	fakeCipher := []byte{
		0x44, 0x61, 0xee, 0x01, 0xc0, 0xcb, 0xe4, 0xba,
		0x78, 0xe6, 0x51, 0xe6, 0x6a, 0xfb, 0x1e, 0xfb,
		0x1c, 0x1e, 0xce, 0xf0, 0xc3, 0xbb, 0xfc, 0x0a,
		0x52, 0x47, 0xd6, 0xfa, 0x05, 0xc8, 0x12, 0xd0,
		0x8a, 0xdd, 0xaa, 0x6c, 0x98, 0xb6, 0x29, 0x25,
		0x45, 0x07, 0xf5, 0x42, 0x90, 0xbc, 0x6e, 0x96,
		0x76, 0x5b, 0x2d, 0xcd, 0x33, 0x9e, 0x72, 0x6e,
		0x8e, 0xef, 0xb0, 0xe5, 0x22, 0xa9, 0x79, 0xdd,
		0x55, 0x33, 0x48, 0x17, 0x1c, 0xcf, 0x41, 0x80,
		0x2b, 0x50, 0x65, 0x6e, 0x0c, 0x4f, 0xf5, 0x00,
		0xbe, 0x60, 0x47, 0x8e, 0x53, 0x9f, 0x8a, 0xda,
		0xbb, 0x7e, 0x89, 0x4d, 0xab, 0x2f, 0x7b, 0x12,
		0x2d, 0xe8, 0xf8, 0xe6, 0x20, 0x9f, 0xb0, 0xd1,
		0xf4, 0x87, 0xbb, 0xe7, 0x4b, 0xff, 0x41, 0x19,
		0xd7, 0x9f, 0x7d, 0xfd, 0x18, 0xfe, 0x5a, 0xfa,
		0x54, 0xfc, 0xca, 0x84, 0x8b, 0xf2, 0xb6, 0x11,
		0xed, 0xc5, 0x6c, 0x81, 0x11, 0xff, 0x99, 0xaf,
		0x7b, 0x7d, 0x30, 0xf2, 0xa7, 0xf4, 0x9f, 0x92,
		0x9e, 0x59, 0x75, 0x10, 0x88, 0xf1, 0x8d, 0x27,
		0x46, 0xdc, 0x23, 0xc3, 0x3c, 0xfa, 0x39, 0xc1,
		0x4d, 0x5c, 0x28, 0x15, 0xaf, 0xf4, 0xf7, 0x49,
		0x2f, 0xee, 0x36, 0xac, 0x45, 0xf1, 0xa8, 0x69,
		0xb4, 0xb2, 0x23, 0x4f, 0x81, 0xf3, 0x2b, 0x4b,
		0x48, 0x78, 0x64, 0x17, 0xa1, 0xf3, 0xb4, 0x61,
		0x7e, 0x5d, 0xe3, 0x65, 0xb4, 0xfe, 0xc2, 0x54,
		0x0f, 0x95, 0x79, 0x7c, 0x5e, 0xff, 0x01, 0x5e,
		0xa3, 0xa0, 0x89, 0x7a, 0xc5, 0xf8, 0x7c, 0xba,
		0xea, 0x0f, 0x12, 0x42, 0xff, 0xd4, 0xef, 0x32,
	}
	_, err = cramerShoupDec(fakeCipher, priv)
	c.Assert(err, ErrorMatches, ".*verification of cipher failed")
}

func (s *OTR4Suite) Test_CramerShoupEncryptAndDecrypt(c *C) {
	message := []byte{
		0xfd, 0xf1, 0x18, 0xbf, 0x8e, 0xc9, 0x64, 0xc7,
		0x94, 0x46, 0x49, 0xda, 0xcd, 0xac, 0x2c, 0xff,
		0x72, 0x5e, 0xb7, 0x61, 0x46, 0xf1, 0x93, 0xa6,
		0x70, 0x81, 0x64, 0x37, 0x7c, 0xec, 0x6c, 0xe5,
		0xc6, 0x8d, 0x8f, 0xa0, 0x43, 0x23, 0x45, 0x33,
		0x73, 0x79, 0xa6, 0x48, 0x57, 0xbb, 0x0f, 0x70,
		0x63, 0x8c, 0x62, 0x26, 0x9e, 0x17, 0x5d, 0x22,
	}

	priv, pub, err := deriveCramerShoupKeys(rand.Reader)
	c.Assert(err, IsNil)

	cipher, err := cramerShoupEnc(message, rand.Reader, pub)
	c.Assert(err, IsNil)

	expMessage, err := cramerShoupDec(cipher, priv)
	c.Assert(expMessage, DeepEquals, message)
	c.Assert(err, IsNil)
}
