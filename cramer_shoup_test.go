package otr4

import (
	"crypto/rand"
	"errors"

	"github.com/twstrike/ed448"
	. "gopkg.in/check.v1"
)

func (s *OTR4Suite) Test_CramerShoupKeyDerivation(c *C) {
	csRandData := []byte{
		// x1
		0x40, 0x80, 0x66, 0x2d, 0xd8, 0xe7, 0xf0, 0x9c,
		0xdf, 0xb0, 0x4e, 0x1c, 0x6e, 0x12, 0x62, 0xa3,
		0x7c, 0x31, 0x9a, 0xe1, 0xe7, 0x86, 0x87, 0xcc,
		0x82, 0x05, 0x78, 0xe6, 0x44, 0x2f, 0x4f, 0x77,
		0x0e, 0xd1, 0xb4, 0x48, 0xa6, 0x05, 0x90, 0x5e,
		0xe7, 0xba, 0xfc, 0x25, 0x99, 0x99, 0xb8, 0xc3,
		0x90, 0x3e, 0xf4, 0xa3, 0x75, 0xee, 0x85, 0x32,
		// x2
		0x16, 0xb1, 0x06, 0x5b, 0x81, 0xea, 0xac, 0xb3,
		0x69, 0x47, 0x6d, 0xa2, 0xaa, 0x86, 0x0b, 0xe5,
		0xcd, 0xac, 0x43, 0xd7, 0xb7, 0xe3, 0xb0, 0x85,
		0xd8, 0x66, 0xf9, 0xb6, 0x45, 0x2e, 0x81, 0x43,
		0xc2, 0x6f, 0x61, 0xc4, 0xdd, 0x65, 0x35, 0xa4,
		0xa4, 0xf9, 0x55, 0xf0, 0xf9, 0xd2, 0xf4, 0xb7,
		0xa4, 0xf9, 0x55, 0xf0, 0xf9, 0xd2, 0xf4, 0xb7,
		// y1
		0x52, 0x18, 0x41, 0x48, 0x60, 0x2d, 0x67, 0x8a,
		0xd3, 0xf3, 0xd2, 0xa4, 0xfd, 0x6f, 0x64, 0xf3,
		0x72, 0x82, 0xb0, 0x6a, 0x4d, 0xea, 0x9c, 0xef,
		0x99, 0x05, 0xe1, 0x8d, 0xaf, 0x2d, 0xdb, 0x52,
		0x57, 0x00, 0xac, 0x45, 0x24, 0x24, 0xb4, 0x79,
		0x02, 0x5f, 0x99, 0x70, 0x95, 0x2a, 0x90, 0x08,
		0x02, 0x5f, 0x99, 0x70, 0x95, 0x2a, 0x90, 0x08,
		// y2
		0x51, 0x5b, 0x69, 0x03, 0xd5, 0x77, 0xb0, 0x77,
		0x35, 0x1f, 0x1b, 0x2d, 0xb1, 0x26, 0xf1, 0x69,
		0x3b, 0xcc, 0x4b, 0x0a, 0x95, 0x83, 0xd7, 0xec,
		0xfa, 0x8c, 0xf7, 0x80, 0xbe, 0x9b, 0x6d, 0xb4,
		0xc3, 0x24, 0x3c, 0x94, 0x9b, 0x63, 0xbc, 0x89,
		0xbc, 0x09, 0x39, 0xb8, 0xbf, 0xa2, 0x9b, 0xf4,
		0x3a, 0xa2, 0x9b, 0xbe, 0x6e, 0x78, 0x7b, 0x11,
		// z
		0x66, 0x60, 0x01, 0xb9, 0x83, 0x10, 0xd5, 0x7d,
		0xe4, 0x86, 0x58, 0x0a, 0x42, 0xd2, 0x2a, 0x74,
		0xe9, 0x5d, 0x77, 0xc4, 0x08, 0x46, 0x31, 0xb4,
		0x75, 0x1b, 0xf2, 0x67, 0x23, 0x19, 0x5e, 0xb6,
		0xfc, 0xe8, 0xd1, 0x38, 0x81, 0xa3, 0x98, 0x41,
		0xdf, 0xdf, 0x5d, 0x8d, 0x41, 0xb4, 0x66, 0x0f,
		0x39, 0xe1, 0x6f, 0x8c, 0x89, 0xed, 0xf6, 0x11,
	}

	expPub := &cramerShoupPublicKey{
		// c
		ed448.NewPoint(
			[16]uint32{
				0x0606f3d8, 0x0ec0d61b, 0x012fb543, 0x0b19056a,
				0x09eb270b, 0x0ab7cdc9, 0x0780ed66, 0x09cdbb10,
				0x01150c66, 0x0baadad6, 0x09300b3d, 0x01062baa,
				0x0ca5ef04, 0x000294fd, 0x096a7492, 0x0221ba94,
			},
			[16]uint32{
				0x0a7c4f2a, 0x04294483, 0x032a3b68, 0x0446a37f,
				0x03ca504f, 0x001ce9e1, 0x09b9e37d, 0x09e9980f,
				0x03754468, 0x0f72cf5f, 0x0ddd35a4, 0x0dacb0f5,
				0x0cd68c1a, 0x0d0e6b5c, 0x0d9a7aad, 0x06974895,
			},
			[16]uint32{
				0x0c5cfcf5, 0x015e1d2e, 0x030f43e1, 0x09627077,
				0x0b7dda00, 0x0ed589b5, 0x0e299dd8, 0x00479e3d,
				0x0807af44, 0x056f0859, 0x0f4b36c0, 0x01028a45,
				0x0f85b79e, 0x09872ad1, 0x0b17b144, 0x0c39f9ce,
			},
			[16]uint32{
				0x0153c4f3, 0x0622e18d, 0x0a16e696, 0x0027490b,
				0x09e61fb8, 0x01b5d132, 0x001c0774, 0x0a7df678,
				0x09be1e39, 0x0da14af7, 0x07f62837, 0x03bf70a5,
				0x08664db7, 0x0df42b0d, 0x04c8eb8d, 0x0ff75875,
			},
		),
		// d
		ed448.NewPoint(
			[16]uint32{
				0x09eb5a8e, 0x0cbb5a87, 0x0917ee81, 0x0ac1c913,
				0x043102c5, 0x035ba97a, 0x05c9a64a, 0x01766cfc,
				0x03f2dbeb, 0x03d0ef41, 0x0ae36f33, 0x08397812,
				0x03cdf9c1, 0x0b58db24, 0x09164d0f, 0x0d0860c0,
			},
			[16]uint32{
				0x04f45da6, 0x0b326e8f, 0x034871f7, 0x0a3eca4c,
				0x0f2540e8, 0x09f583f0, 0x0c7c9fc3, 0x014cc64b,
				0x02abfb59, 0x08c8b911, 0x00a461e3, 0x09720d20,
				0x0cdca0ce, 0x01af712f, 0x067d28ed, 0x01c7bedf,
			},
			[16]uint32{
				0x0fe5d3d6, 0x0b526634, 0x044eeffb, 0x0140201a,
				0x090274f8, 0x01e9c8d3, 0x0c361361, 0x020e78bc,
				0x0e442d6f, 0x07cf2bfc, 0x05507b8a, 0x00f8ee78,
				0x03a5ca40, 0x07ef5ae6, 0x09f8efa7, 0x0de044fa,
			},
			[16]uint32{
				0x032700d6, 0x0937b2a1, 0x0ff8f18c, 0x0ea45bdf,
				0x09fd32db, 0x095e532c, 0x082dafdd, 0x08f4e580,
				0x07368d3c, 0x093a3c58, 0x01dba619, 0x07f35a4d,
				0x08fd9bf0, 0x0655e332, 0x0bb2d065, 0x043167c5,
			},
		),
		// h
		ed448.NewPoint(
			[16]uint32{
				0x0dc2c86b, 0x062aa269, 0x04784c9d, 0x01750bcf,
				0x00683731, 0x0b198881, 0x0a36ee98, 0x0c24e6cb,
				0x0669a4ce, 0x01980f31, 0x0b1e6f4c, 0x08bdd701,
				0x08d950a1, 0x07bb8ae8, 0x0840a4e0, 0x01cef363,
			},
			[16]uint32{
				0x01ce8ca2, 0x0cc89a87, 0x0188519f, 0x092cebb4,
				0x097a3274, 0x0dbee214, 0x0bdd1dd3, 0x0271ec23,
				0x0d28e056, 0x02c21b7e, 0x0f60b334, 0x0e4b4223,
				0x0f473d83, 0x089718a9, 0x0b075869, 0x0700c433,
			},
			[16]uint32{
				0x035cd394, 0x07926b4e, 0x01d6652e, 0x0baacce0,
				0x0a29339d, 0x08b71b6a, 0x088184c8, 0x099a6fc8,
				0x0d8abc38, 0x0055c583, 0x0bcf735e, 0x03df44e4,
				0x06928a16, 0x0ef21a23, 0x00234218, 0x007d2dd1,
			},
			[16]uint32{
				0x0fb7cd8c, 0x0a32ac22, 0x03199605, 0x0607c466,
				0x0eddad7f, 0x08a71cfc, 0x066944f7, 0x020576e5,
				0x03202796, 0x0138fefd, 0x038b840f, 0x00272913,
				0x0c3082e6, 0x07d44546, 0x0b332340, 0x0b6f354d,
			},
		),
	}

	expPriv := &cramerShoupPrivateKey{
		// x1
		ed448.NewDecafScalar([]byte{
			0xc6, 0xd0, 0x98, 0x2e, 0xe4, 0xe5, 0x81, 0xe4,
			0x61, 0x3c, 0x46, 0x99, 0x0a, 0x37, 0x79, 0xc3,
			0xfa, 0xe5, 0xd5, 0x29, 0x27, 0x31, 0xa3, 0x55,
			0x9f, 0x34, 0x91, 0xd1, 0x0c, 0x7f, 0x88, 0x56,
			0x8c, 0x62, 0xe1, 0x86, 0xb7, 0xef, 0xd6, 0xcb,
			0x1b, 0x14, 0x88, 0x3b, 0xc0, 0xfb, 0xac, 0x46,
			0x0c, 0xc7, 0x20, 0x82, 0x3e, 0xd0, 0xdc, 0x2c}),
		// x2
		ed448.NewDecafScalar([]byte{
			0x7d, 0xbc, 0x55, 0xd7, 0xab, 0x95, 0xd3, 0xca,
			0xb7, 0x40, 0x1f, 0x64, 0xf4, 0xd3, 0x60, 0x2b,
			0xa0, 0xec, 0xed, 0x92, 0x90, 0xf7, 0xc4, 0x5c,
			0x51, 0xd0, 0x22, 0xd7, 0x5e, 0xf1, 0xee, 0x6c,
			0xd3, 0xf9, 0x2b, 0xea, 0xbf, 0x49, 0x94, 0xda,
			0xa5, 0x2c, 0x3b, 0x77, 0xdc, 0x98, 0x0c, 0xc6,
			0x36, 0xdf, 0xb9, 0x49, 0x7b, 0x54, 0x70, 0x05}),
		// y1
		ed448.NewDecafScalar([]byte{
			0xa5, 0x08, 0xbe, 0x0a, 0x34, 0x92, 0x1b, 0xfc,
			0x23, 0x3e, 0xb1, 0x4b, 0x82, 0x75, 0xa1, 0x9b,
			0x52, 0x85, 0xa6, 0xc5, 0x29, 0x59, 0x4a, 0x5e,
			0xe6, 0x1b, 0x69, 0xa0, 0x47, 0xf9, 0xcf, 0xed,
			0xa9, 0xfa, 0x15, 0xd3, 0x5f, 0x16, 0x11, 0xe7,
			0xa1, 0x84, 0x33, 0x1b, 0x07, 0x84, 0x18, 0x6c,
			0x6a, 0xb0, 0xfa, 0xdb, 0x95, 0x82, 0x26, 0x2c}),
		// y2
		ed448.NewDecafScalar([]byte{
			0x8b, 0xa2, 0xa9, 0x1a, 0xf1, 0x0b, 0x04, 0x96,
			0x92, 0xf9, 0xd5, 0x97, 0x27, 0x96, 0x6c, 0x8f,
			0x55, 0x6e, 0xf8, 0xdc, 0x85, 0x77, 0xf6, 0x66,
			0x46, 0xf4, 0x2a, 0xcd, 0x8e, 0x42, 0x83, 0xd8,
			0xd2, 0x95, 0xed, 0xc7, 0x24, 0x19, 0x72, 0xf6,
			0xe2, 0xdd, 0x3e, 0x21, 0x3e, 0x3a, 0x35, 0x65,
			0xfc, 0x78, 0x2c, 0x50, 0xfd, 0x0b, 0xfe, 0x1c}),
		// z
		ed448.NewDecafScalar([]byte{
			0x5b, 0x39, 0x3a, 0xce, 0x70, 0xc2, 0x97, 0x9c,
			0x78, 0x00, 0x74, 0xb9, 0x79, 0xac, 0xfb, 0xff,
			0xa7, 0xb8, 0x5c, 0x64, 0x6b, 0x5a, 0x4d, 0xb3,
			0x59, 0x1b, 0x31, 0x20, 0x4d, 0xdb, 0x16, 0xa5,
			0xf9, 0xb2, 0x88, 0x69, 0x13, 0xf1, 0xb1, 0xf1,
			0x4e, 0x5c, 0x05, 0x2f, 0x9e, 0xed, 0x3e, 0xf0,
			0x6f, 0xe8, 0x4e, 0x81, 0x49, 0x31, 0xfe, 0x3b}),
	}
	priv, pub, err := deriveCramerShoupKeys(fixedRand(csRandData))

	c.Assert(expPub.c, DeepEquals, pub.c)
	c.Assert(expPub.d, DeepEquals, pub.d)
	c.Assert(expPub.h, DeepEquals, pub.h)
	c.Assert(err, Equals, nil)

	c.Assert(expPriv.x1, DeepEquals, priv.x1)
	c.Assert(expPriv.x2, DeepEquals, priv.x2)
	c.Assert(expPriv.y1, DeepEquals, priv.y1)
	c.Assert(expPriv.y2, DeepEquals, priv.y2)
	c.Assert(expPriv.z, DeepEquals, priv.z)

}

func (s *OTR4Suite) Test_CramerShoupEncryption(c *C) {
	randData := []byte{
		0x40, 0x80, 0x66, 0x2d, 0xd8, 0xe7, 0xf0, 0x9c,
		0xdf, 0xb0, 0x4e, 0x1c, 0x6e, 0x12, 0x62, 0xa3,
		0x7c, 0x31, 0x9a, 0xe1, 0xe7, 0x86, 0x87, 0xcc,
		0x82, 0x05, 0x78, 0xe6, 0x44, 0x2f, 0x4f, 0x77,
		0x0e, 0xd1, 0xb4, 0x48, 0xa6, 0x05, 0x90, 0x5e,
		0xe7, 0xba, 0xfc, 0x25, 0x99, 0x99, 0xb8, 0xc3,
		0x90, 0x3e, 0xf4, 0xa3, 0x75, 0xee, 0x85, 0x32,
	}

	message := []byte{
		0xfd, 0xf1, 0x18, 0xbf, 0x8e, 0xc9, 0x64, 0xc7,
		0x94, 0x46, 0x49, 0xda, 0xcd, 0xac, 0x2c, 0xff,
		0x72, 0x5e, 0xb7, 0x61, 0x46, 0xf1, 0x93, 0xa6,
		0x70, 0x81, 0x64, 0x37, 0x7c, 0xec, 0x6c, 0xe5,
		0xc6, 0x8d, 0x8f, 0xa0, 0x43, 0x23, 0x45, 0x33,
		0x73, 0x79, 0xa6, 0x48, 0x57, 0xbb, 0x0f, 0x70,
		0x63, 0x8c, 0x62, 0x26, 0x9e, 0x17, 0x5d, 0x22,
	}

	pub := &cramerShoupPublicKey{
		// c
		ed448.NewPoint([16]uint32{
			0x08290f20, 0x0e84a2fe,
			0x093116ae, 0x0a2cf3aa,
			0x07c8f002, 0x0094dbda,
			0x0d35a081, 0x03a973f8,
			0x0602ec38, 0x0fb5739c,
			0x067815c5, 0x02d85827,
			0x016d0b78, 0x0c783a60,
			0x00e65cf8, 0x0e5e2c5e,
		},
			[16]uint32{
				0x015e1325, 0x0e82731e,
				0x020c4f72, 0x03de0bc5,
				0x095d725c, 0x0a73a2e5,
				0x05f13fbd, 0x0be2dbe6,
				0x0695401d, 0x0c5f1cfc,
				0x006a1437, 0x025dfc8b,
				0x0259fad2, 0x0a2e8a44,
				0x026cc8d3, 0x07610349,
			},
			[16]uint32{
				0x01573e52, 0x02cb3245,
				0x0c01480d, 0x0bd0a1cd,
				0x00a70916, 0x0f9e7c9c,
				0x0c61b7ca, 0x06d48745,
				0x002686be, 0x0b9efce9,
				0x0128cc93, 0x05c61ea7,
				0x008e9b70, 0x068ad694,
				0x0f75837b, 0x036dc03c,
			},
			[16]uint32{
				0x0c245679, 0x0edc5d7f,
				0x093c08b5, 0x0c1154bd,
				0x044b31a8, 0x01e20dd4,
				0x0384c9f6, 0x071d6974,
				0x09a8e436, 0x0ded16ac,
				0x079807f2, 0x0cca2839,
				0x06226c1a, 0x0e2f0066,
				0x048fdca1, 0x0c5bb507,
			},
		),
		// d
		ed448.NewPoint([16]uint32{
			0x0ec27dd8, 0x066272ab,
			0x0e313c61, 0x0586f1b3,
			0x05a7a1d7, 0x064f0f54,
			0x01e1a724, 0x019a09e9,
			0x0fbe5937, 0x098d95be,
			0x05ecbe99, 0x0a736742,
			0x006e1cdf, 0x0c9cf1b2,
			0x0bcfeffa, 0x0ca04a9c,
		},
			[16]uint32{
				0x0a36dd6b, 0x0d075858,
				0x06093a6d, 0x0d43f7e5,
				0x073cd5f6, 0x03ce6359,
				0x06ecee6a, 0x0d6cc582,
				0x0b5335b6, 0x0a873bbf,
				0x06a6d12c, 0x0cd0fa39,
				0x0edf4676, 0x0ea316a4,
				0x0b5ae6ba, 0x06793af6,
			},
			[16]uint32{
				0x014f9618, 0x0c523557,
				0x08e37cc7, 0x00680c90,
				0x0182ee90, 0x0679b038,
				0x0c943c0c, 0x0c3839d7,
				0x05dfe98b, 0x0d20714b,
				0x02cf865f, 0x0fe5e2c2,
				0x09b4a40b, 0x004206c4,
				0x03d83754, 0x0245bfb3,
			},
			[16]uint32{
				0x0e46e642, 0x0e143f26,
				0x00eb2244, 0x039136b2,
				0x075f8153, 0x05fae34f,
				0x0c3f42ed, 0x029bb2e2,
				0x0710e0a4, 0x001a6502,
				0x0db6d216, 0x04765aa6,
				0x047c1435, 0x0ac184e0,
				0x0704cc33, 0x0b50d91f,
			},
		),
		// h
		ed448.NewPoint([16]uint32{
			0x0423e798, 0x05fb02d9,
			0x0bf3f8fd, 0x0ae3d12d,
			0x0c140b29, 0x068bc613,
			0x08acd122, 0x0f246d71,
			0x02a8efba, 0x0658139f,
			0x001d2aac, 0x064d8554,
			0x01602a08, 0x030b7200,
			0x0c62265f, 0x055c5eee,
		},
			[16]uint32{
				0x0d5742b2, 0x0cb48dd8,
				0x0665b312, 0x0e841d74,
				0x0167d334, 0x0b4a8678,
				0x037b43f2, 0x01c27b2d,
				0x0a740c2f, 0x0c413062,
				0x08c9abda, 0x022a4cf9,
				0x0d6c49ea, 0x00b4ec09,
				0x09fdc6b7, 0x0700e163,
			},
			[16]uint32{
				0x021175ea, 0x01f851d2,
				0x02609418, 0x01eb2354,
				0x0fdb265d, 0x0bf5f855,
				0x0f02d8b8, 0x03964227,
				0x0647ff08, 0x0dfa5761,
				0x0851b34b, 0x0b6dae86,
				0x0c73e400, 0x01fa9378,
				0x0fa01d3c, 0x065d7548,
			},
			[16]uint32{
				0x0629c26e, 0x02cdb278,
				0x06e06582, 0x067295f0,
				0x0e3404f1, 0x08a55f6b,
				0x04ccd74e, 0x0841e8e7,
				0x0645b383, 0x05b6d03c,
				0x030c4ff3, 0x00e518a4,
				0x0ef4ad0a, 0x000554d4,
				0x032fa788, 0x0ede9c21,
			},
		),
	}

	expCipher := []byte{
		0xc0, 0xee, 0xfa, 0x10, 0x0e, 0x77, 0x50, 0xfe,
		0xfa, 0xc3, 0xff, 0x7d, 0x89, 0x88, 0x98, 0xb8,
		0xd3, 0xc6, 0x6c, 0x7c, 0x0f, 0xc8, 0xff, 0x2f,
		0x8c, 0x89, 0xb0, 0xc4, 0x72, 0x7a, 0x1c, 0x11,
		0xb0, 0x12, 0x99, 0x77, 0x42, 0x0c, 0xdf, 0x73,
		0x74, 0x42, 0x33, 0x24, 0x10, 0x2d, 0xbd, 0xdf,
		0xdc, 0x49, 0x24, 0x91, 0x43, 0x07, 0x8c, 0x38,
		0xbf, 0x5b, 0x5c, 0x33, 0xa7, 0x69, 0x65, 0xd4,
		0xc0, 0x14, 0x0e, 0x45, 0xf6, 0x8d, 0x79, 0xba,
		0x14, 0xbb, 0x95, 0xdc, 0xde, 0xe3, 0xb3, 0x25,
		0x46, 0xf6, 0x7b, 0x1d, 0x5a, 0x83, 0x70, 0x5e,
		0x6c, 0x31, 0x8a, 0x58, 0x22, 0x0f, 0x59, 0xfe,
		0x1b, 0x7c, 0x7d, 0x94, 0x30, 0x8c, 0xa0, 0xbb,
		0xf1, 0x82, 0xf8, 0x7c, 0xa5, 0x76, 0x6e, 0x68,
		0x08, 0x3f, 0x90, 0x29, 0xf4, 0x54, 0xc2, 0x35,
		0x9e, 0x84, 0x99, 0x92, 0xe4, 0xfe, 0x33, 0xc0,
		0x96, 0xce, 0x6a, 0x08, 0x9b, 0xa5, 0x7b, 0x50,
		0x78, 0x9a, 0x1a, 0x9c, 0x4d, 0xe0, 0xc1, 0x20,
		0x85, 0x2c, 0xf8, 0x2f, 0xf8, 0xe6, 0x8f, 0xcb,
		0xb9, 0x25, 0x4d, 0x82, 0x86, 0x82, 0x94, 0xd0,
		0xd7, 0x67, 0x5e, 0x06, 0x31, 0x97, 0x88, 0x1c,
		0x24, 0x10, 0x20, 0xbe, 0x5b, 0x53, 0x0d, 0xba,
		0x4c, 0x6c, 0x90, 0x4d, 0xb5, 0x55, 0xaa, 0xa7,
		0x86, 0x28, 0xdc, 0xda, 0xb6, 0x4a, 0x7e, 0x9a,
		0x9a, 0x7e, 0x19, 0x3b, 0x97, 0x4f, 0xf2, 0x82,
		0x66, 0x17, 0xe4, 0xae, 0x50, 0xd8, 0x64, 0x72,
		0xad, 0x84, 0x4e, 0xc2, 0x85, 0x8b, 0x0e, 0xb3,
		0x0f, 0x43, 0xb8, 0x92, 0x90, 0x7c, 0xff, 0x20,
	}

	cipher, err := cramerShoupEnc(message, fixedRand(randData), pub)
	c.Assert(cipher, DeepEquals, expCipher)
	c.Assert(err, IsNil)
}

// XXX: use different values
func (s *OTR4Suite) Test_CramerShoupDec(c *C) {
	cipher := []byte{
		0x48, 0x61, 0xee, 0x01, 0xc0, 0xcb, 0xe4, 0xba,
		0x78, 0xe6, 0x51, 0xe6, 0x6a, 0xfb, 0x1e, 0xfb,
		0x1c, 0x1e, 0xce, 0xf0, 0xc3, 0xbb, 0xfc, 0x0a,
		0x50, 0x47, 0xd6, 0xfa, 0x05, 0xc8, 0x12, 0xd0,
		0x8a, 0xd7, 0xa4, 0x6c, 0x98, 0xb6, 0x29, 0x25,
		0x45, 0x07, 0xf5, 0x42, 0x90, 0xbc, 0x6e, 0x96,
		0x76, 0x5b, 0x2d, 0xcd, 0x2d, 0x9e, 0x72, 0x6e,
		0x8e, 0xef, 0xb0, 0xe5, 0x22, 0xa9, 0x79, 0xdd,
		0x55, 0x33, 0x48, 0x17, 0x1c, 0xcf, 0x41, 0x80,
		0x2b, 0x50, 0x65, 0x6e, 0x0c, 0x50, 0xf5, 0x00,
		0xbe, 0x60, 0x47, 0x8e, 0x53, 0x9f, 0x8a, 0xda,
		0xbb, 0x7e, 0x89, 0x4d, 0xab, 0x28, 0x7b, 0x12,
		0x2d, 0xe8, 0xf8, 0xe6, 0x20, 0x95, 0xb0, 0xd1,
		0xf4, 0x87, 0xbb, 0xe7, 0x4b, 0x7f, 0x41, 0x19,
		0xd7, 0x9f, 0x7d, 0xfd, 0x18, 0x6e, 0x5a, 0xfa,
		0x54, 0xfc, 0xca, 0x84, 0x8b, 0x72, 0xb6, 0x11,
		0xed, 0xc5, 0x6c, 0x81, 0x11, 0x4f, 0x99, 0xaf,
		0x7b, 0x7d, 0x30, 0xf2, 0xa7, 0x84, 0x9f, 0x92,
		0x9e, 0x59, 0x75, 0x10, 0x88, 0xc1, 0x8d, 0x27,
		0x46, 0xdc, 0x23, 0xc3, 0x3c, 0xaa, 0x39, 0xc1,
		0x4d, 0x5c, 0x28, 0x15, 0xaf, 0xb4, 0xf7, 0x49,
		0x2f, 0xee, 0x36, 0xac, 0x45, 0x61, 0xa8, 0x69,
		0xb4, 0xb2, 0x23, 0x4f, 0x81, 0x53, 0x2b, 0x4b,
		0x48, 0x78, 0x64, 0x17, 0xa1, 0xd3, 0xb4, 0x61,
		0x7e, 0x5d, 0xe3, 0x65, 0xb4, 0xae, 0xc2, 0x54,
		0x0f, 0x95, 0x79, 0x7c, 0x5e, 0xdf, 0x01, 0x5e,
		0xa3, 0xa0, 0x89, 0x7a, 0xc5, 0x18, 0x7c, 0xba,
		0xea, 0x0f, 0x12, 0x42, 0x2c, 0xd4, 0xef, 0x32,
	}

	priv := &cramerShoupPrivateKey{
		// x1
		ed448.NewDecafScalar([]byte{
			0xd5, 0xde, 0xed, 0x1a, 0xef, 0x64, 0xee, 0x90,
			0xab, 0xae, 0xbd, 0x66, 0xda, 0xe9, 0x9b, 0xe0,
			0xe9, 0x7e, 0xab, 0x4d, 0x8a, 0xd0, 0xbb, 0x9c,
			0xd1, 0xef, 0xde, 0x06, 0x95, 0x91, 0xf6, 0xed,
			0xb2, 0x43, 0xab, 0x41, 0x26, 0x1d, 0x27, 0xd4,
			0xb4, 0x6d, 0xa5, 0x37, 0xb3, 0x39, 0x7a, 0x5a,
			0x74, 0xb4, 0x2b, 0x72, 0xb5, 0x4d, 0xfe, 0x08,
		},
		),
		// x2
		ed448.NewDecafScalar([]byte{
			0xd5, 0xde, 0xed, 0x1a, 0xef, 0x64, 0xee, 0x90,
			0xab, 0xae, 0xbd, 0x66, 0xda, 0xe9, 0x9b, 0xe0,
			0xe9, 0x7e, 0xab, 0x4d, 0x8a, 0xd0, 0xbb, 0x9c,
			0xd1, 0xef, 0xde, 0x06, 0x95, 0x91, 0xf6, 0xed,
			0xb2, 0x43, 0xab, 0x41, 0x26, 0x1d, 0x27, 0xd4,
			0xb4, 0x6d, 0xa5, 0x37, 0xb3, 0x39, 0x7a, 0x5a,
			0x74, 0xb4, 0x2b, 0x72, 0xb5, 0x4d, 0xfe, 0x08,
		},
		),
		// y1
		ed448.NewDecafScalar([]byte{
			0xd5, 0xde, 0xed, 0x1a, 0xef, 0x64, 0xee, 0x90,
			0xab, 0xae, 0xbd, 0x66, 0xda, 0xe9, 0x9b, 0xe0,
			0xe9, 0x7e, 0xab, 0x4d, 0x8a, 0xd0, 0xbb, 0x9c,
			0xd1, 0xef, 0xde, 0x06, 0x95, 0x91, 0xf6, 0xed,
			0xb2, 0x43, 0xab, 0x41, 0x26, 0x1d, 0x27, 0xd4,
			0xb4, 0x6d, 0xa5, 0x37, 0xb3, 0x39, 0x7a, 0x5a,
			0x74, 0xb4, 0x2b, 0x72, 0xb5, 0x4d, 0xfe, 0x08,
		},
		),
		// y2
		ed448.NewDecafScalar([]byte{
			0xd5, 0xde, 0xed, 0x1a, 0xef, 0x64, 0xee, 0x90,
			0xab, 0xae, 0xbd, 0x66, 0xda, 0xe9, 0x9b, 0xe0,
			0xe9, 0x7e, 0xab, 0x4d, 0x8a, 0xd0, 0xbb, 0x9c,
			0xd1, 0xef, 0xde, 0x06, 0x95, 0x91, 0xf6, 0xed,
			0xb2, 0x43, 0xab, 0x41, 0x26, 0x1d, 0x27, 0xd4,
			0xb4, 0x6d, 0xa5, 0x37, 0xb3, 0x39, 0x7a, 0x5a,
			0x74, 0xb4, 0x2b, 0x72, 0xb5, 0x4d, 0xfe, 0x08,
		},
		),
		// z
		ed448.NewDecafScalar([]byte{
			0xd5, 0xde, 0xed, 0x1a, 0xef, 0x64, 0xee, 0x90,
			0xab, 0xae, 0xbd, 0x66, 0xda, 0xe9, 0x9b, 0xe0,
			0xe9, 0x7e, 0xab, 0x4d, 0x8a, 0xd0, 0xbb, 0x9c,
			0xd1, 0xef, 0xde, 0x06, 0x95, 0x91, 0xf6, 0xed,
			0xb2, 0x43, 0xab, 0x41, 0x26, 0x1d, 0x27, 0xd4,
			0xb4, 0x6d, 0xa5, 0x37, 0xb3, 0x39, 0x7a, 0x5a,
			0x74, 0xb4, 0x2b, 0x72, 0xb5, 0x4d, 0xfe, 0x08,
		},
		),
	}

	expMessage := []byte{
		0xfd, 0xf1, 0x18, 0xbf, 0x8e, 0xc9, 0x64, 0xc7,
		0x94, 0x46, 0x49, 0xda, 0xcd, 0xac, 0x2c, 0xff,
		0x72, 0x5e, 0xb7, 0x61, 0x46, 0xf1, 0x93, 0xa6,
		0x70, 0x81, 0x64, 0x37, 0x7c, 0xec, 0x6c, 0xe5,
		0xc6, 0x8d, 0x8f, 0xa0, 0x43, 0x23, 0x45, 0x33,
		0x73, 0x79, 0xa6, 0x48, 0x57, 0xbb, 0x0f, 0x70,
		0x63, 0x8c, 0x62, 0x26, 0x9e, 0x17, 0x5d, 0x22,
	}

	message, err := cramerShoupDec(cipher, priv)
	c.Assert(message, DeepEquals, expMessage)
	c.Assert(err, IsNil)

	fakeCipher := []byte{
		0x44, 0x61, 0xee, 0x01, 0xc0, 0xcb, 0xe4, 0xba,
		0x78, 0xe6, 0x51, 0xe6, 0x6a, 0xfb, 0x1e, 0xfb,
		0x1c, 0x1e, 0xce, 0xf0, 0xc3, 0xbb, 0xfc, 0x0a,
		0x52, 0x47, 0xd6, 0xfa, 0x05, 0xc8, 0x12, 0xd0,
		0x8a, 0xdd, 0xaa, 0x6c, 0x98, 0xb6, 0x29, 0x25,
		0x45, 0x07, 0xf5, 0x42, 0x90, 0xbc, 0x6e, 0x96,
		0x76, 0x5b, 0x2d, 0xcd, 0x33, 0x9e, 0x72, 0x6e,
		0x8e, 0xef, 0xb0, 0xe5, 0x22, 0xa9, 0x79, 0xdd,
		0x55, 0x33, 0x48, 0x17, 0x1c, 0xcf, 0x41, 0x80,
		0x2b, 0x50, 0x65, 0x6e, 0x0c, 0x4f, 0xf5, 0x00,
		0xbe, 0x60, 0x47, 0x8e, 0x53, 0x9f, 0x8a, 0xda,
		0xbb, 0x7e, 0x89, 0x4d, 0xab, 0x2f, 0x7b, 0x12,
		0x2d, 0xe8, 0xf8, 0xe6, 0x20, 0x9f, 0xb0, 0xd1,
		0xf4, 0x87, 0xbb, 0xe7, 0x4b, 0xff, 0x41, 0x19,
		0xd7, 0x9f, 0x7d, 0xfd, 0x18, 0xfe, 0x5a, 0xfa,
		0x54, 0xfc, 0xca, 0x84, 0x8b, 0xf2, 0xb6, 0x11,
		0xed, 0xc5, 0x6c, 0x81, 0x11, 0xff, 0x99, 0xaf,
		0x7b, 0x7d, 0x30, 0xf2, 0xa7, 0xf4, 0x9f, 0x92,
		0x9e, 0x59, 0x75, 0x10, 0x88, 0xf1, 0x8d, 0x27,
		0x46, 0xdc, 0x23, 0xc3, 0x3c, 0xfa, 0x39, 0xc1,
		0x4d, 0x5c, 0x28, 0x15, 0xaf, 0xf4, 0xf7, 0x49,
		0x2f, 0xee, 0x36, 0xac, 0x45, 0xf1, 0xa8, 0x69,
		0xb4, 0xb2, 0x23, 0x4f, 0x81, 0xf3, 0x2b, 0x4b,
		0x48, 0x78, 0x64, 0x17, 0xa1, 0xf3, 0xb4, 0x61,
		0x7e, 0x5d, 0xe3, 0x65, 0xb4, 0xfe, 0xc2, 0x54,
		0x0f, 0x95, 0x79, 0x7c, 0x5e, 0xff, 0x01, 0x5e,
		0xa3, 0xa0, 0x89, 0x7a, 0xc5, 0xf8, 0x7c, 0xba,
		0xea, 0x0f, 0x12, 0x42, 0xff, 0xd4, 0xef, 0x32,
	}
	_, err = cramerShoupDec(fakeCipher, priv)
	c.Assert(err, DeepEquals, errors.New("verification of cipher failed"))
}

func (s *OTR4Suite) Test_CramerShoupEncryptAndDecrypt(c *C) {
	message := []byte{
		0xfd, 0xf1, 0x18, 0xbf, 0x8e, 0xc9, 0x64, 0xc7,
		0x94, 0x46, 0x49, 0xda, 0xcd, 0xac, 0x2c, 0xff,
		0x72, 0x5e, 0xb7, 0x61, 0x46, 0xf1, 0x93, 0xa6,
		0x70, 0x81, 0x64, 0x37, 0x7c, 0xec, 0x6c, 0xe5,
		0xc6, 0x8d, 0x8f, 0xa0, 0x43, 0x23, 0x45, 0x33,
		0x73, 0x79, 0xa6, 0x48, 0x57, 0xbb, 0x0f, 0x70,
		0x63, 0x8c, 0x62, 0x26, 0x9e, 0x17, 0x5d, 0x22,
	}

	priv, pub, err := deriveCramerShoupKeys(rand.Reader)
	cipher, err := cramerShoupEnc(message, rand.Reader, pub)
	expMessage, err := cramerShoupDec(cipher, priv)

	c.Assert(expMessage, DeepEquals, message)
	c.Assert(err, IsNil)
}
